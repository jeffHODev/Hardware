#include "LteHal.h"
#include "string.h"
#include "LteHardware.h"


unsigned char one_net_key[]="*296832#838905307#json*";//296832：产品编号；571498701：鉴权码；json：脚本
unsigned char Establish_TCP_Connection[]="AT+CAOPEN=0,0,\"TCP\",\"dtu.heclouds.com\",1811\r";

//unsigned char Establish_TCP_Connection[100];//="AT+CIPSTART=\"TCP\",\"dtu.heclouds.com\",1811\r";
//unsigned char Establish_TCP_Connection2[100]="AT+CIPSTART=\"TCP\",\"192.168.1.3\",3\r";
unsigned char	NET_STAUS=SIMCOM_NET_NOT;//网络链接状态信息标志
uint32_t  SIMCOM_TimeOut_Count;

lte_stru lte_usr;
lte_stru *GetLteStru()
{
    return &lte_usr;
}
unsigned int sendCommand(unsigned char moduleType,char *Command, char *Response, unsigned long Timeout, unsigned char Retry)
{
    unsigned char *USARTX_RX_BUF;

    static  unsigned char TimeOutFlag=0;
    static unsigned char RetryCount;
    static uint32_t timeout;
    if(moduleType == LTE_4G)
    {

        USARTX_RX_BUF =lte_usr.lterxbuffer;

    }
    else if((moduleType == LTE_NBIOT))
    {

        USARTX_RX_BUF =lte_usr.lterxbuffer;;
    }
    if((HAL_GetTick()-timeout)>=Timeout)
    {
        if(RetryCount<=Retry)
        {
            if(Retry>0)
            {
                LteUart_SendStr( moduleType,Command);
                RetryCount = RetryCount +1;
                timeout = HAL_GetTick();
                TimeOutFlag = 1;

            }

        }

        if (strstr(USARTX_RX_BUF, Response) != NULL)
        {
            RetryCount = 0;
            // USART1_CLR_Buf();
            return Success;
        }
        else
        {
            //USART1_CLR_Buf();
            return Failure;
        }

    }
    else
    {
        if (strstr(USARTX_RX_BUF, Response) != NULL)
        {
            RetryCount = 0;
            // USART1_CLR_Buf();
            return Success;
        }
        else
        {
            //USART1_CLR_Buf();
            return Failure;
        }

    }

}

void SIMCOM_ReConnect()
{
    if(NET_STAUS!=SIMCOM_NET_NOT&&NET_STAUS!=SIMCOM_NET_OK) //控制系统超时机制，保证系统能够在超时后重新启动链接
        SIMCOM_TimeOut_Count++;
    else if(NET_STAUS==SIMCOM_NET_OK)
        SIMCOM_TimeOut_Count=0;
    if(SIMCOM_TimeOut_Count>=SIMCOM_TIME_OUT)
    {
        SIMCOM_TimeOut_Count=0;
        NET_STAUS=SIMCOM_NET_NOT;
    }

}
#define debug  1
//static uint32_t count = 0;
void set_NetStatus(unsigned char flag)
{
    NET_STAUS = flag;
    SIMCOM_TimeOut_Count = 0;
}

void SIMCOM_Register_Network()
{
   // unsigned char *p;
   // p=malloc(sizeof(unsigned char) * 64);
    unsigned char moduleType;
	  #if ROLE == 0
			moduleType = LTE_4G;
	  #else 
			moduleType = LTE_NBIOT;
	  #endif
    switch(NET_STAUS)
    {


    case SIMCOM_NET_NOT:
    {
        SIMCOM_TimeOut_Count = 0;
        LtePowerManage(LTE_4G,ON);                   //复位重启
        NET_STAUS=SIMCOM_POWER_ON;       //状态机复位
    }
    break;
    case SIMCOM_POWER_ON://SIMCOM_READY_YES:
    {

        if (sendCommand(moduleType,"AT\r\n", "OK\r\n", 50000, 1) == Success)
            NET_STAUS = SIMCOM_READY_YES;
        else
        {
            NET_STAUS = SIMCOM_NET_NOT;

        }

    }
    break;
    case SIMCOM_READY_YES:
    {
        if (sendCommand(moduleType,"ATE0\r\n", "OK\r\n", 10000, 1) == Success)
            NET_STAUS = SIMCOM_CLOSE_ECHO;
    }
    break;


    case SIMCOM_CLOSE_ECHO:
    {
        if (sendCommand(moduleType,"AT+CPIN?\r\n", "READY", 10000, 1) == Success)
            NET_STAUS = SIMCOM_CARD_DET;
    }
    break;
    case SIMCOM_CARD_DET:
    {
    
		//if (sendCommand("AT+CSQ\r\n", "+CSQ: 2", 13000000, 1) == Success)
        if (sendCommand(moduleType,"AT+CGATT?\r\n", "+CGATT: 1", 130000, 1) == Success)
        {

            NET_STAUS=SIMCOM_GPRS_READY;
        }
    }
    break;

    case SIMCOM_GPRS_READY:
    {
        if (sendCommand(moduleType,"AT+CASSLCFG=0,\"SSL\",0\r\n", "OK", 10000, 1) == Success)
            NET_STAUS = SIMCOM_NET_CLOSE;
    }
    break;
    case SIMCOM_NET_CLOSE:
    {
        if (sendCommand(moduleType,"AT+CNACT=0,1\r\n", "ACTIVE", 20000, 1) == Success)
            NET_STAUS = SIMCOM_NET_CONFIG;
        SIMCOM_TimeOut_Count = 0;
    }
    break;


    case SIMCOM_NET_CONFIG://SIMCOM_NET_PASS_THROUGH:
    {
        if (sendCommand(moduleType,Establish_TCP_Connection, "OK", 500000, 1) == Success)
        {

            NET_STAUS=SIMCOM_NET_OK;
            NET_STAUS=SIMCOM_Connect_Platform;
        }

    }
    break;
    case SIMCOM_Connect_Platform:
    {
        if (sendCommand(moduleType,"AT+CASWITCH =0,1\r\n", "OK", 10000, 1) == Success)
            NET_STAUS = SIMCOM_NET_PASS_THROUGH;
        else
            NET_STAUS = SIMCOM_NET_PASS_THROUGH;
        SIMCOM_TimeOut_Count = 0;
    }
    break;
    case SIMCOM_NET_PASS_THROUGH:
    {
        static unsigned char tx_count;

        if (sendCommand(moduleType,one_net_key, "received", 340000, 1) == Success)
        {
            NET_STAUS=SIMCOM_NET_OK;
        }
        else
        {
            tx_count++;
            if(tx_count>=100)
            {
                // NET_STAUS=SIMCOM_NET_OK;
                tx_count = 0;
            }

        }
    }
    break;


    case SIMCOM_NET_OK:
    {
        if (sendCommand(moduleType,one_net_key, "CLOSED", 20, 0) == Success||
                sendCommand(moduleType,one_net_key, "+CIPOPEN: 0,4", 20, 0) == Success||
                sendCommand(moduleType,one_net_key, "+CASTATE: 0", 20, 0) == Success)
        {
            NET_STAUS=SIMCOM_NET_ERROR;
        }
    }
    break;
    case SIMCOM_NET_ERROR:
    {
        LtePowerManage(LTE_4G,ON);                   //复位重启
        NET_STAUS=SIMCOM_POWER_ON;       //状态机复位
    }
    break;
    default :
        break;
    }
    SIMCOM_ReConnect();
 
}


