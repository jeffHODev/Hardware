/********************************************************************************************************
 * @file	main.c
 *
 * @brief	This is the source file for BLE SDK
 *
 * @author	BLE GROUP
 * @date	2020.06
 *
 * @par     Copyright (c) 2020, Telink Semiconductor (Shanghai) Co., Ltd. ("TELINK")
 *          All rights reserved.
 *
 *          Redistribution and use in source and binary forms, with or without
 *          modification, are permitted provided that the following conditions are met:
 *
 *              1. Redistributions of source code must retain the above copyright
 *              notice, this list of conditions and the following disclaimer.
 *
 *              2. Unless for usage inside a TELINK integrated circuit, redistributions
 *              in binary form must reproduce the above copyright notice, this list of
 *              conditions and the following disclaimer in the documentation and/or other
 *              materials provided with the distribution.
 *
 *              3. Neither the name of TELINK, nor the names of its contributors may be
 *              used to endorse or promote products derived from this software without
 *              specific prior written permission.
 *
 *              4. This software, with or without modification, must only be used with a
 *              TELINK integrated circuit. All other usages are subject to written permission
 *              from TELINK and different commercial license may apply.
 *
 *              5. Licensee shall be solely responsible for any claim to the extent arising out of or
 *              relating to such deletion(s), modification(s) or alteration(s).
 *
 *          THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *          ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *          WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *          DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
 *          DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *          (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *          LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *          ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *          (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *          SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************************************/
#include "tl_common.h"
#include "drivers.h"
#include "stack/ble/ble.h"
#include "app.h"
#include "config_usr.h"


/**
 * @brief   IRQ handler
 * @param   none.
 * @return  none.
 */
_attribute_ram_code_ void irq_handler(void)
{
    DBG_CHN15_HIGH;


    blc_sdk_irq_handler ();
    if((reg_irq_src & FLD_IRQ_GPIO_RISC0_EN)==FLD_IRQ_GPIO_RISC0_EN)
    {
        reg_irq_src |= FLD_IRQ_GPIO_RISC0_EN; // clear the relevant irq
        #if ROLE == MASTER

        if(gpio_read(ECHO)==0)  // press key with low level to flash light
        {
			cal_rx_time();
		  // sensor_power(0);

            gpio_toggle(GPIO_LED_RED);
            measure_stop();

        }
		#endif
    }

   if((reg_irq_src & FLD_IRQ_GPIO_EN)==FLD_IRQ_GPIO_EN)
    {
    	 reg_irq_src |= FLD_IRQ_GPIO_EN; // clear the relevant irq
        if(gpio_read(KB))// press key with low level to flash light
        {

            //gpio_toggle(GPIO_LED_RED);
			deviceTimeout(0);
            //measure_start();

        }
         //printf("key\n");
    }

    DBG_CHN15_LOW;
}

/**
 * @brief		This is main function
 * @param[in]	none
 * @return      none
 */
_attribute_ram_code_ int main(void)
{
#if (BLE_APP_PM_ENABLE)
    blc_pm_select_internal_32k_crystal();
#endif

#if(MCU_CORE_TYPE == MCU_CORE_825x)
    cpu_wakeup_init();
#elif(MCU_CORE_TYPE == MCU_CORE_827x)
    cpu_wakeup_init(DCDC_MODE, EXTERNAL_XTAL_24M);
#endif

    /* detect if MCU is wake_up from deep retention mode */
    int deepRetWakeUp = pm_is_MCU_deepRetentionWakeup();  //MCU deep retention wakeUp


    clock_init(SYS_CLK_TYPE);

    rf_drv_init(RF_MODE_BLE_1M);

    gpio_init(!deepRetWakeUp);


    if( deepRetWakeUp )  //MCU wake_up from deepSleep retention mode
    {
        user_init_deepRetn ();
    }
    else  //MCU power_on or wake_up from deepSleep mode
    {
    	printf("gpio\n");
        user_init_normal ();
    }
    user_gpio_init();
    /* load customized freq_offset cap value.
     */
    blc_app_loadCustomizedParameters();
   

    //irq_enable();
	//init_measure();
	printf("init sdk\n");
    u32 tick_tmp;
    //gpio_write(GPIO_LED_RED,1);
    while(1)
    {

    #if ROLE == MASTER
    //key_proc();
	#endif
        /*if( (clock_time()-tic k_tmp)>=1000*CLOCK_16M_SYS_TIMER_CLK_1MS)
        {
            gpio_toggle(GPIO_LED_RED);
            tick_tmp = clock_time();

        }*/

        //gpio_write(GPIO_PB4, 0);
        // sleep_ms(1000);
        //gpio_write(GPIO_LED_RED, 1);
        //gpio_write(GPIO_PB4, 1);
        // sleep_ms(1000);

        main_loop ();

    }
    return 0;
}


