C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BSP_INIT
OBJECT MODULE PLACED IN .\Output\bsp_init.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\bsp_init.c COMPACT OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Include) DEFIN
                    -E(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\bsp_init.lst) TABS(2) OBJECT(.\Output\bsp_init.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp.
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2017
  12          //********************************************************************************************************
             -***
  13          //  --bin -o E:/Keil_Project/OneNET.bin E:/Keil_Project/OneNET.axf
  14          //                   E:/ÉòÑô¶à±¦ÐÇ¿Æ¼¼ÓÐÏÞ¹«Ë¾/µç½âË®»úÇåÏ´»ú/×ÔÑÐµç½âË®±­/µç½âË®±­³ÌÐò/Project/Output/GPI
             -O.bin E:/ÉòÑô¶à±¦ÐÇ¿Æ¼¼ÓÐÏÞ¹«Ë¾/µç½âË®»úÇåÏ´»ú/×ÔÑÐµç½âË®±­/µç½âË®±­³ÌÐò/Project/Output/GPIO.bin
  15          //********************************************************************************************************
             -***
  16          //  File Function: N76E003 PWM Output demo code
  17          //********************************************************************************************************
             -***
  18          #include "N76E003.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          #include "SFR_Macro.h"
  22          #include "Function_define.h"
  23          #include "eepromf.h"
  24          #include "Bsp_init.h"
  25          
  26          //*****************  The Following is in define in Fucntion_define.h  ***************************
  27          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  28          //***********************************************************************************************
  29          uint8_t equipment =0; //Éè±¸¿ØÖÆ bit   7           6       5      4     3       2     1    0
  30          //             None         switch   None   LED   Pump   Green  Red  Blue
  31          extern uint32_t systick;
  32          uint8_t Led_Ram;//ÊýÂë¹Ü¿ØÖÆ
  33          
  34          uint8_t vbat_warn_flag;//0Õý³££»1µÍÑ¹
  35          uint8_t DEBUG=0;
  36          uint16_t ADC_Value[8] = {0, 1, 2, 3, 4, 5, 6, 7}; // ¸÷Í¨µÀ²ÉÑùÖµ
  37          double Vcc_value = 5;                                           // µçÔ´µçÑ¹Öµ
  38          double Vbat_value =3.7;                                            // µç³ØµçÑ¹Öµ
  39          float Ele_value = 24;                                               // µç½âµçÑ¹Öµ
  40          float Now_current =25;                                                // µ±Ç°ÎÂ¶ÈÖµ
  41          uint8_t Speak_Flage =0;                                        // ·äÃùÆ÷      0 ¹Ø±Õ  1 ¿ª»ú   2 °´¼üÒô  3
             - µç½âÍê³ÉÌáÊ¾Òô  4 µÍµçÁ¿±¨¾¯Òô  5 ÆäËû±¨¾¯Òô
  42          uint8_t Key_Status =0;                                                 // °´¼ü×´Ì¬ ÅçÎí°´¼ü×´Ì¬
  43          uint8_t Work_Mode =0;                                              // ¹¤×÷Ä£Ê½    0 ¿ª»ú×Ô¼ìÄ£Ê½  1 µç½âÄ£
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 2   

             -Ê½ 2
  44          //uint8_t Set_Time =2;                                               // ÉèÖÃµç½âÊ±³¤ 3-4-5·ÖÖÓ
  45          uint8_t Charge_Mode =0;                                        // ³äµçÄ£Ê½ Î´³äµç 0 ³äµç 1 ³äÂú 2
  46          //uint8_t Erro_Code =0;                                              // ¹ÊÕÏÂë 0 ÎÞ¹ÊÕÏ 1 µçÔ´µçÑ¹µÍ 2 Ô­Ë
             -®ÎÂ¶È¸ß  3Ë®ÖÊÒì³£  4ÇåÏ´µç´Å·§
  47          uint8_t Ele_Flage =0;                                              // ¿ªÊ¼µç½â±êÖ¾ 0 Î´µç½â 1 ¿ªÊ¼µç½â 2 Ò
             -Ñ¾­µç½â 3 µç½â½áÊø
  48          uint16_t Ele_Time = 0;                                              // µç½âÊ±¼ä
  49          uint16_t All_Use_Time = 0;                                      // ÀÛ¼ÆÊ¹ÓÃ´ÎÊý
  50          uint16_t Temp_Alarm_Num = 0;                                // ÎÂ¶È±¨¾¯ÊýÖµ
  51          uint16_t TDS_Alarm_Num = 0;                                     // TDS±¨¾¯ÊýÖµ
  52          //uint8_t LED_Con = 0;                                                // LEDÖ¸Ê¾µÆ
  53          uint8_t pump_flag = 0;
  54          /* ×Ô¶¨Òåºê */
  55          double  Bandgap_Voltage;                                        //please always use "double" mode for this
  56          code unsigned char  table[] = {0xc0, 0xf9, 0xa4, 0xb0, 0xff,0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0x88, 0x83
             -, 0xc6, 0xa1, 0x86, 0x8e}; //ÊýÂë¹Ü¶ÎÂë
  57          
  58          // ·äÃùÆ÷
  59          // 2500, 3000, 2500, 3000, 3500 ¿ª»ú
  60          // 2000, 2100, 2300, 2500, 3500 µç½âÍê³É
  61          // 5000, 0, 0, 5000, 0, 0,5000  µçÁ¿µÍ
  62          // 3500, 3000, 2500, 3500, 2500 ±¨¾¯²»¹¤×÷
  63          code uint16_t Music_Code_1[MUSIC_NUM1] =        // ¿ª/¹Ø»ú
  64          {
  65              2200, 2500, 3400
  66          };
  67          code uint16_t Music_Code_2[MUSIC_NUM2] =        // °´¼ü
  68          {
  69              2700, 0, 0
  70          };
  71          code uint16_t Music_Code_3[MUSIC_NUM3] =        // µç½âÍê³É
  72          {
  73              2000, 2100, 2300, 2500, 3500
  74          };
  75          code uint16_t Music_Code_4[MUSIC_NUM4] =        // µÍµçÁ¿ÌáÊ¾Òô
  76          {
  77              5000, 0, 0, 5000, 0, 0, 5000
  78          };
  79          code uint16_t Music_Code_5[MUSIC_NUM5] =        // ±¨¾¯²»¹¤×÷
  80          {
  81              3500, 3000, 2500, 3500, 2500
  82          };
  83          code uint16_t Music_Code_6[MUSIC_NUM6] =        // ISPÉÕÐ´³ÌÐò
  84          {
  85              4000, 2000, 4000, 2000, 4000
  86          };
  87          
  88          void delay_10ms(uint32_t tmp)
  89          {
  90   1          static uint32_t tick_t;
  91   1          if(tmp>0)
  92   1          {
  93   2              tick_t = systick;
  94   2              while((systick-tick_t)<tmp)
  95   2                  ;
  96   2      
  97   2          }
  98   1      }
  99          /*********************************************************************************************************
             -***
 100          *    Main function
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 3   

 101          **********************************************************************************************************
             -**/
 102          void Board_gpio_init(void)
 103          {
 104   1      
 105   1          P10_Input_Mode;
 106   1          P00_Input_Mode;                             // KEY
 107   1          P01_Input_Mode;                             // CHARG
 108   1          // P03_Input_Mode;                             // STDBY
 109   1          P05_PushPull_Mode;                      // EN_OUT µç½âµçÔ´Ê¹ÄÜ
 110   1      
 111   1          // P10_PushPull_Mode;                      // VALUE
 112   1          P11_PushPull_Mode;                      // CLK
 113   1          P12_PushPull_Mode;                      // CE
 114   1          P13_PushPull_Mode;                      // OE
 115   1          P14_PushPull_Mode;                      // DAT
 116   1          P15_PushPull_Mode;                      // EN_POWER
 117   1      
 118   1          // ÉÏµçºóÏÈ±£³Ö
 119   1          Pow_Con = 1;                                    // ¿ª»úÉÏµç¸ßµçÆ½±£³ÖÉÏµç×´Ì¬
 120   1          DJ_Con = 0;                                         // µç½âÆ÷²»¹¤×÷
 121   1          Clear_Con = 1;                                  // LED½ûÖ¹ÏÔÊ¾
 122   1          // LED_Con = 0;                                    // ¿ØÖÆLED
 123   1          //Value_Con=0;                                  // ¿ØÖÆµç´Å·§
 124   1      }
 125          
 126          // ISP Èí¼þ¸´Î»
 127          void ISP_Rest(void)
 128          {
 129   1          Speak_Flage = 6;
 130   1          DJ_Con = 0;                                         // µç½âÆ÷¹Ø±Õ
 131   1          //LED_Con = 0;                                    // ¿ØÖÆLEDµãÁÁ
 132   1          //Value_Con=0;                                  // ¹Ø·§
 133   1          delay_ms(200);
 134   1          TA = 0xAA;
 135   1          TA = 0x55;
 136   1          CHPCON = 0x02;                //set boot from AP
 137   1          TA = 0xAA;
 138   1          TA = 0x55;
 139   1          CHPCON = 0x82;                //software reset enable
 140   1      
 141   1          /* Trap the CPU */
 142   1      }
 143          
 144          // ¶ÁÈ¡´øÏ¶µçÑ¹³ö³§±ê¶¨Öµ
 145          void READ_BANDGAP(void)
 146          {
 147   1          UINT8 BandgapHigh, BandgapLow, BandgapMark;
 148   1          double Bandgap_Value, Bandgap_Voltage_Temp;
 149   1      
 150   1          set_IAPEN;
 151   1          IAPCN = READ_UID;
 152   1          IAPAL = 0x0d;
 153   1          IAPAH = 0x00;
 154   1          set_IAPGO;
 155   1          BandgapLow = IAPFD;
 156   1          BandgapMark = BandgapLow & 0xF0;
 157   1      
 158   1          if (BandgapMark == 0x80)
 159   1          {
 160   2              BandgapLow = BandgapLow & 0x0F;
 161   2              IAPAL = 0x0C;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 4   

 162   2              IAPAH = 0x00;
 163   2              set_IAPGO;
 164   2              BandgapHigh = IAPFD;
 165   2              Bandgap_Value = (BandgapHigh << 4) + BandgapLow;
 166   2              Bandgap_Voltage_Temp = Bandgap_Value * 3 / 4;
 167   2              Bandgap_Voltage = Bandgap_Voltage_Temp -
 168   2                                33;            //the actually banggap voltage value is similar this value.
 169   2          }
 170   1          if (BandgapMark == 0x00)
 171   1          {
 172   2              BandgapLow = BandgapLow & 0x0F;
 173   2              IAPAL = 0x0C;
 174   2              IAPAH = 0x00;
 175   2              set_IAPGO;
 176   2              BandgapHigh = IAPFD;
 177   2              Bandgap_Value = (BandgapHigh << 4) + BandgapLow;
 178   2              Bandgap_Voltage = Bandgap_Value * 3 / 4;
 179   2          }
 180   1          if (BandgapMark == 0x90)
 181   1          {
 182   2              IAPAL = 0x0E;
 183   2              IAPAH = 0x00;
 184   2              set_IAPGO;
 185   2              BandgapHigh = IAPFD;
 186   2              IAPAL = 0x0F;
 187   2              IAPAH = 0x00;
 188   2              set_IAPGO;
 189   2              BandgapLow = IAPFD;
 190   2              BandgapLow = BandgapLow & 0x0F;
 191   2              Bandgap_Value = (BandgapHigh << 4) + BandgapLow;
 192   2              Bandgap_Voltage = Bandgap_Value * 3 / 4;
 193   2          }
 194   1          clr_IAPEN;
 195   1      }
 196          
 197          // PWM³õÊ¼»¯
 198          void Init_pwm_code(uint16_t fpwm, uint16_t duty)
 199          {
 200   1          uint16_t pwm;
 201   1      
 202   1          PWM3_P04_OUTPUT_ENABLE;
 203   1          PWM_IMDEPENDENT_MODE;
 204   1          PWM_CLOCK_DIV_2;                        // 16/2=8
 205   1      
 206   1          pwm = 8000000 / fpwm;
 207   1          PWMPH = pwm / 256;                      // PWM¼ÆÊ±Æ÷T1¸ßÎ»
 208   1          PWMPL = pwm % 256;                      // PWM¼ÆÊ±Æ÷T1µÍÎ»
 209   1          /**********************************************************************
 210   1              PWM frequency = Fpwm/((PWMPH,PWMPL) + 1) <Fpwm = Fsys/PWM_CLOCK_DIV>
 211   1                                          = (16MHz/2)/(0x7CF + 1)
 212   1                                          = 2KHz (1ms)
 213   1          ***********************************************************************/
 214   1          PWM3H = duty / 256;
 215   1          PWM3L = duty % 256;
 216   1      
 217   1      //      set_SFRPAGE;                                //PWM4 and PWM5 duty seting is in SFP page 1
 218   1      //      PWM4H = 0x03;
 219   1      //      PWM4L = 0xCF;
 220   1      //      clr_SFRPAGE;
 221   1      // PWM output
 222   1          PWM3_OUTPUT_NORMAL;
 223   1      //      PWM4_OUTPUT_NORMAL;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 5   

 224   1      //-------- PWM start run--------------
 225   1          set_LOAD;
 226   1          set_PWMRUN;
 227   1      }
 228          
 229          void Init_adc_read(void)
 230          {
 231   1          static uint8_t init = 0;
 232   1          float res, value;
 233   1      //    uint8_t j;
 234   1      
 235   1          CKDIV = 0x02;                                       // IMPORTANT!! Modify system clock to 4MHz ,then a
             -dd the ADC sampling clock base to add the sampling timing.
 236   1          Enable_ADC_AIN0;                // µç½âµçÑ¹
 237   1          clr_ADCF;
 238   1          set_ADCS;
 239   1          while (ADCF == 0);
 240   1          ADC_Value[0] = (ADCRH << 4) + ADCRL;
 241   1          Disable_ADC;
 242   1      
 243   1          Enable_ADC_AIN1;                // ÎÂ¶È»òÕßµçÁ÷
 244   1          clr_ADCF;
 245   1          set_ADCS;
 246   1          while (ADCF == 0);
 247   1          ADC_Value[1] = (ADCRH << 4) + ADCRL;
 248   1          Disable_ADC;
 249   1      
 250   1          Enable_ADC_AIN6;                // µç³ØµçÑ¹
 251   1          clr_ADCF;
 252   1          set_ADCS;
 253   1          while (ADCF == 0);
 254   1          ADC_Value[2] = (ADCRH << 4) + ADCRL;
 255   1          Disable_ADC;
 256   1      
 257   1          Enable_ADC_BandGap;         // ²Î¿¼Ô´
 258   1          clr_ADCF;
 259   1          set_ADCS;
 260   1          while (ADCF == 0);
 261   1          ADC_Value[3] = (ADCRH << 4) + ADCRL;
 262   1          Disable_ADC;
 263   1          CKDIV = 0x00;
 264   1          // ¼ÆËã²ÉÑùÊý¾Ý
 265   1      
 266   1          // *****************¼ÆËãÎÂ¶È******************************
 267   1      
 268   1      
 269   1          // ***************** ¸ù¾Ý´øÏ¶µçÑ¹¼ÆËã¹©µçµçÑ¹******************************
 270   1          value = (4096.0 / ADC_Value[3]) * Bandgap_Voltage / 1.0;
 271   1          value =  value /1000;
 272   1          if (init == 0)
 273   1              Vcc_value = value;              // Î´³õÊ¼»¯
 274   1      
 275   1          Vcc_value = Vcc_value - Vcc_value / FIR_NUM + value / FIR_NUM; //µçÔ´
 276   1      
 277   1          value = (ADC_Value[1]) * Vcc_value /4095;//µç½âµçÁ÷¶ÔÓ¦µçÑ¹
 278   1          // Î´³õÊ¼»¯
 279   1          if (init == 0)
 280   1              Now_current = value/11/RS;
 281   1          value = value/11/RS;
 282   1          Now_current = Now_current - Now_current / FIR_NUM + value / FIR_NUM;
 283   1          //Now_current = Now_current;
 284   1          // ***************** ¸ù¾Ý´øÏ¶µçÑ¹¼ÆËãµç³ØµçÑ¹******************************
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 6   

 285   1          value = (ADC_Value[2]) * Vcc_value /4095*2;
 286   1          if (init == 0)
 287   1              Vbat_value = value;             // Î´³õÊ¼»¯
 288   1          Vbat_value = Vbat_value - Vbat_value / FIR_NUM + value / FIR_NUM; //µç³ØµçÑ¹
 289   1      
 290   1          // ***************** ¼ÆËãµç½âµçÑ¹******************************
 291   1          res = ADC_Value[0] * Vcc_value / 4095.0 * 11.0;
 292   1          if (init == 0)
 293   1              Ele_value = res;
 294   1          //  res = res*11;
 295   1          Ele_value = Ele_value - Ele_value / FIR_NUM + res / FIR_NUM;
 296   1          Ele_value = Ele_value;
 297   1          // ³õÊ¼»¯×´Ì¬½áÊø
 298   1          init = 1;
 299   1      }
 300          
 301          // ·äÃùÆ÷¼ä¸ô¶¨Ê±Æ÷
 302          void Timer1_init(void)
 303          {
 304   1          TIMER1_MODE1_ENABLE;
 305   1      
 306   1          clr_T1M;                            // 1/12 system clock
 307   1          //set_T1M;                      // system clock
 308   1      
 309   1          TH1 = TIMER_DIV12_VALUE_10ms / 256;             // ÑÓÊ±10ms
 310   1          TL1 = TIMER_DIV12_VALUE_10ms % 256;             // ÑÓÊ±10ms
 311   1      
 312   1          set_ET1;              // enable Timer1 interrupt
 313   1          set_EA;               // enable interrupts
 314   1          set_TR1;              // Timer1 run
 315   1      
 316   1          Speak_Flage = 0;            // ¿ª»úÉù
 317   1      }
 318          /*******************************************************************
 319          ¹¦ÄÜ£º¿ØÖÆÉè±¸µÄ¿ª¹Ø
 320          ²ÎÊý£ºdev£ºÉè±¸ÀàÐÍ
 321                LED_BLUE=1
 322                LED_RED=4
 323                LED_GREEN=2
 324                PUMP=8
 325                DIA1=0x10
 326                SWITCH=0x40
 327            level:µçÆ½
 328          
 329          
 330          *******************************************************************/
 331          void Equipment_Ctrl_Set(unsigned char dev, unsigned char level)
 332          {
 333   1          if(dev&0x01)
 334   1          {
 335   2              if (level == 0)
 336   2              {
 337   3                  equipment = equipment & 0xfe;
 338   3              }
 339   2              else
 340   2              {
 341   3                  equipment = equipment | 0x01;
 342   3              }
 343   2      
 344   2          }
 345   1          if(dev&0x02)
 346   1          {
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 7   

 347   2              if (level == 0)
 348   2              {
 349   3                  equipment = equipment & 0xfd;
 350   3              }
 351   2              else
 352   2              {
 353   3                  equipment = equipment | 0x02;
 354   3              }
 355   2      
 356   2          }
 357   1          if(dev&0x04)
 358   1          {
 359   2              if (level == 0)
 360   2              {
 361   3                  equipment = equipment & 0xfb;
 362   3              }
 363   2              else
 364   2              {
 365   3                  equipment = equipment | 0x04;
 366   3              }
 367   2      
 368   2          }
 369   1          if(dev&0x08)
 370   1          {
 371   2              if (level == 0)
 372   2              {
 373   3                  equipment = equipment & 0xf7;
 374   3              }
 375   2              else
 376   2              {
 377   3                  equipment = equipment | 0x08;
 378   3              }
 379   2      
 380   2          }
 381   1          if(dev&0x10)
 382   1          {
 383   2              if (level == 0)
 384   2              {
 385   3                  equipment = equipment & 0xef;
 386   3              }
 387   2              else
 388   2              {
 389   3                  equipment = equipment | 0x10;
 390   3              }
 391   2      
 392   2          }
 393   1          if(dev&0x20)
 394   1          {
 395   2              if (level == 0)
 396   2              {
 397   3                  equipment = equipment & 0xdf;
 398   3              }
 399   2              else
 400   2              {
 401   3                  equipment = equipment | 0x20;
 402   3              }
 403   2      
 404   2          }
 405   1          if(dev&0x40)
 406   1          {
 407   2              if (level == 0)
 408   2              {
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 8   

 409   3                  equipment = equipment & 0xbf;
 410   3              }
 411   2              else
 412   2              {
 413   3                  equipment = equipment | 0x40;
 414   3              }
 415   2      
 416   2          }
 417   1          if(dev&0x80)
 418   1          {
 419   2              if (level == 0)
 420   2              {
 421   3                  equipment = equipment & 0x7f;
 422   3              }
 423   2              else
 424   2              {
 425   3                  equipment = equipment | 0x80;
 426   3              }
 427   2      
 428   2          }
 429   1          if((dev&0xff)==0)
 430   1          {
 431   2              equipment = 0x06;
 432   2              DJ_Con = 0;
 433   2          }
 434   1      
 435   1      }
 436          
 437          void Set_Speak_Value(uint8_t flage)
 438          {
 439   1          Speak_Flage = flage;
 440   1      }
 441          void testt()
 442          {
 443   1          Init_pwm_code(100,20);
 444   1      }
 445          // ·äÃùÆ÷ÃùÏì
 446          void Speak_value(void)
 447          {
 448   1          static uint8_t codenum = 0;
 449   1          static uint16_t music = 0;
 450   1      
 451   1          // ·äÃùÆ÷
 452   1          switch (Speak_Flage)
 453   1          {
 454   2          case 0: // ¹Ø±Õ
 455   2              Init_pwm_code(2000, 0);
 456   2              codenum = 0;
 457   2              break;
 458   2          case 1: // ¿ª»úÒô
 459   2              if (codenum >= MUSIC_NUM1)
 460   2              {
 461   3                  Speak_Flage = 0;
 462   3                  codenum = 0;
 463   3                  music = 0;
 464   3              }
 465   2              else
 466   2              {
 467   3                  if (music != Music_Code_1[codenum])
 468   3                  {
 469   4                      music = Music_Code_1[codenum];
 470   4                      Init_pwm_code(music, music / 10);
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 9   

 471   4                  }
 472   3                  codenum++;
 473   3              }
 474   2              break;
 475   2          case 2: // °´¼üÒô
 476   2              if (codenum >= MUSIC_NUM2)
 477   2              {
 478   3                  Speak_Flage = 0;
 479   3                  codenum = 0;
 480   3                  music = 0;
 481   3              }
 482   2              else
 483   2              {
 484   3                  if (music != Music_Code_2[codenum])
 485   3                  {
 486   4                      music = Music_Code_2[codenum];
 487   4                      Init_pwm_code(music, music / 10);
 488   4                  }
 489   3                  codenum++;
 490   3              }
 491   2              break;
 492   2          case 3: // µç½â½áÊø
 493   2              if (codenum >= MUSIC_NUM3)
 494   2              {
 495   3                  Speak_Flage = 0;
 496   3                  codenum = 0;
 497   3                  music = 0;
 498   3              }
 499   2              else
 500   2              {
 501   3                  if (music != Music_Code_3[codenum])
 502   3                  {
 503   4                      music = Music_Code_3[codenum];
 504   4                      Init_pwm_code(music, music / 10);
 505   4                  }
 506   3                  codenum++;
 507   3              }
 508   2              break;
 509   2          case 4: // µçÁ¿µÍ
 510   2              if (codenum > MUSIC_NUM4)
 511   2              {
 512   3                  Speak_Flage = 0;
 513   3                  codenum = 0;
 514   3                  music = 0;
 515   3              }
 516   2              else
 517   2              {
 518   3                  if (music != Music_Code_4[codenum])
 519   3                  {
 520   4                      music = Music_Code_4[codenum];
 521   4                      Init_pwm_code(music, music / 10);
 522   4                  }
 523   3                  codenum++;
 524   3              }
 525   2              break;
 526   2          case 5: // Òì³£±¨¾¯
 527   2              if (codenum >= MUSIC_NUM5)
 528   2              {
 529   3                  Speak_Flage = 0;
 530   3                  codenum = 0;
 531   3                  music = 0;
 532   3              }
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 10  

 533   2              else
 534   2              {
 535   3                  if (music != Music_Code_5[codenum])
 536   3                  {
 537   4                      music = Music_Code_5[codenum];
 538   4                      Init_pwm_code(music, music / 10);
 539   4                  }
 540   3                  codenum++;
 541   3              }
 542   2              break;
 543   2          case 6: // ISP
 544   2              if (codenum >= MUSIC_NUM6)
 545   2              {
 546   3                  Speak_Flage = 0;
 547   3                  codenum = 0;
 548   3                  music = 0;
 549   3              }
 550   2              else
 551   2              {
 552   3                  if (music != Music_Code_6[codenum])
 553   3                  {
 554   4                      music = Music_Code_6[codenum];
 555   4                      Init_pwm_code(music, music / 10);
 556   4                  }
 557   3                  codenum++;
 558   3              }
 559   2              break;
 560   2          default :
 561   2              break;
 562   2          }
 563   1          // ¼ÆÊýÆ÷Ôö¼Ó
 564   1      
 565   1      }
 566          static uint32_t key_time_start = 0,key_time_star2 = 0,cnt;   // °´¼ü¼ì²âÊ±¼ä     START   Éè¶¨°´¼ü
 567          /***********************************************************************************
 568           * º¯ÊýÃû£ºButton_Read(void)
 569           * ÃèÊö  £º¶ÁÈ¡°´¼üÊý¾Ý
 570           * ÊäÈë  £ºÎÞ1
 571           * Êä³ö  £ºÎÞ
 572          ************************************************************************************/
 573          uint8_t Button_Read(unsigned char flag)
 574          {
 575   1          //static uint32_t tick_tmp;
 576   1      
 577   1      
 578   1          // °´¼üÂË²¨Ê±¼ä¼ÆÊ±
 579   1      
 580   1      //    static unsigned char key_hit_flag;
 581   1      
 582   1          if (Key_Set == 1 && Key_Pump == 1)//Í¬Ê±°´ÏÂÎÞÐ§
 583   1          {
 584   2              return KEY_START_UP;
 585   2          }
 586   1          else
 587   1          {
 588   2              if (Key_Set == 1)                                           // ¿ª¹Ø»ú°´¼ü°´ÏÂ
 589   2              {
 590   3                  delay_10ms(30);
 591   3                cnt++;
 592   3                  while(Key_Set==1)
 593   3                  {
 594   4                      key_time_start++;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 11  

 595   4                      if(key_time_start > BUTTON_LONG_TIME)
 596   4                      {
 597   5      
 598   5                          Key_Status = Key_Status & 0xf0;
 599   5                          Key_Status = Key_Status | KEY_START_HOLD;       //
 600   5                        
 601   5                          break;
 602   5                      }
 603   4                  }
 604   3      
 605   3                  if(key_time_start<(BUTTON_LONG_TIME))
 606   3                  {
 607   4                      Key_Status = Key_Status & 0xf0;
 608   4                      Key_Status = Key_Status | KEY_START_DOWN;
 609   4                      if(flag == 0)
 610   4                          Set_Speak_Value(2);
 611   4                  }
 612   3                  key_time_start = 0;
 613   3              }
 614   2      
 615   2      
 616   2              if (Key_Pump == 1)                                           // Ë®±Ã°´¼ü
 617   2              {
 618   3                  while(Key_Pump==1)
 619   3                  {
 620   4                      key_time_star2++;
 621   4                      if(key_time_star2 > BUTTON_LONG_TIME)
 622   4                      {
 623   5      
 624   5                          Key_Status = Key_Status & 0x0f;
 625   5                          Key_Status = Key_Status | KEY_HSTART_HOLD;           //
 626   5                          break;
 627   5                      }
 628   4      
 629   4                  }
 630   3                  if(key_time_star2<BUTTON_LONG_TIME)
 631   3                  {
 632   4                      Key_Status = Key_Status & 0x0f;
 633   4                      Key_Status = Key_Status | KEY_HSTART_DOWN;
 634   4                      Set_Speak_Value(2);
 635   4      
 636   4                  }
 637   3                  key_time_star2 = 0;
 638   3      
 639   3              }
 640   2          }
 641   1      
 642   1          return Key_Status;
 643   1      }
 644          void key_reset()
 645          {
 646   1      //    {
 647   1          Key_Status = Key_Status & 0xf0;
 648   1          Key_Status = Key_Status | KEY_START_UP; // °´¼üÌ§Æð
 649   1          key_time_start = 0;
 650   1          Key_Status = Key_Status & 0x0f;
 651   1          Key_Status = Key_Status | KEY_HSTART_UP; // °´¼üÌ§Æð
 652   1          key_time_star2 = 0;
 653   1      }
 654          unsigned char Charge_Process()
 655          {
 656   1          static uint32_t charge_time = 0;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 12  

 657   1          static uint32_t stdby_time = 0;
 658   1          static unsigned char red_flag;
 659   1          static unsigned char charge_status;
 660   1          // ¼ì²â³äµçÄ£Ê½
 661   1          if (Charge_Set == 1)//³äµçÄ£Ê½
 662   1          {
 663   2              Charge_Mode = 5;
 664   2              if(charge_status==1)
 665   2              {
 666   3                  if(charge_time%100 == 0)
 667   3                  {
 668   4                      if(red_flag == 0)//³äµçÊ±£¬¶¨Ê±Ë¢ÐÂºìµÆ
 669   4                          red_flag = 1;
 670   4                      else
 671   4                          red_flag = 0;
 672   4                      Equipment_Ctrl_Set(LED_RED, red_flag);//ºìµÆÉÁ
 673   4                      Equipment_Ctrl_Set(LED_GREEN, 1);//ÂÌµÆÃð
 674   4                  }
 675   3      
 676   3                  if (charge_time++ > CHARGE_LONG_TIME) //
 677   3                  {
 678   4                      charge_time = 0;         //
 679   4                  }
 680   3      
 681   3              }
 682   2              if (Vbat_value <= MAX_VBAT && Vbat_value >= MIN_VBAT)
 683   2              {
 684   3                  charge_status = 1;
 685   3            Charge_Mode = 1;   // ³äµç
 686   3              }
 687   2              else if (Vbat_value > MAX_VBAT) 
 688   2              {
 689   3                  if (stdby_time++ > FCHARGE_LONG_TIME)// ³äÂú
 690   3                  {
 691   4                      Equipment_Ctrl_Set(LED_RED, 1);//ºìµÆÃð
 692   4                      Equipment_Ctrl_Set(LED_GREEN, 0);//ÂÌµÆÁÁ
 693   4                      charge_status = 0;
 694   4                      stdby_time = BUTTON_LONG_TIME;
 695   4                      Charge_Mode = 2;// ³äÂú;
 696   4                  }
 697   3                  else
 698   3                  {
 699   4                      charge_status = 1;
 700   4                      Charge_Mode = 1;// ³äµç
 701   4                  }
 702   3              }
 703   2              else
 704   2              {
 705   3                  Charge_Mode = 3; //¹ÊÕÏ
 706   3                  stdby_time = 0;
 707   3                  charge_time = 0;
 708   3      
 709   3              }
 710   2      
 711   2          }
 712   1          else
 713   1          {
 714   2              stdby_time = 0;
 715   2              charge_time = 0;
 716   2              Charge_Mode = 0;//Ã»³äµç;
 717   2          }
 718   1          return Charge_Mode;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 13  

 719   1      
 720   1      }
 721          
 722          
 723          //·¢ËÍÒ»¸ö×Ö½ÚÊý¾Ý¸ø595ÔÙ²¢ÐÐÊä³ö,data1¿ØÖÆÊýÂë¹ÜÏÔÊ¾£¬data2¿ØÖÆÍâ²¿Éè±¸
 724          void SendTo595(uint8_t data1, uint8_t data2)
 725          {
 726   1          char i = 0;
 727   1          //Clear_Con = 1;
 728   1          for (i; i < 16; i++)
 729   1          {
 730   2      
 731   2              if(i<8)
 732   2              {
 733   3      
 734   3                  if(0x80 & data1)
 735   3                      DAT_Con = 1; //&Îª°´Î»ÔËËã·û£¬¼´È«1Îª1£¬ÓÐ0Îª0£¬ÉÏÊ½Ò²¾ÍÊÇ £¨1000 0000£©&£¨1111 1111£©=100
             -0 0000£¬Èô¸ßÎ»Îª1ÔòÊÇ1¸ßÎ»Îª0ÔòÕâ¸öÊ½×ÓÎª0
 736   3                  else
 737   3                      DAT_Con = 0;
 738   3                  data1 = data1 <<1; //×óÒÆÒ»Î» ½«¸ßÎ»²¹¸øµÍÎ»£¬Èç¹û¶þ½øÖÆÊýÎª01010101 ÄÇÃ´_crol_(1) Îª10101010
 739   3                  CLK_Con = 1;          //ÉÏÉýÑØÈÃ´®ÐÐÊäÈëÊ±ÖÓ±ä³É¸ßµçÆ½ ²¢ÑÓÊ±Ò»¸öÊ±ÖÓÖÜÆÚ
 740   3                  _nop_();
 741   3              }
 742   2              else
 743   2              {
 744   3                  CLK_Con = 0;
 745   3                  if(0x80 & data2)
 746   3                      DAT_Con = 1; //&Îª°´Î»ÔËËã·û£¬¼´È«1Îª1£¬ÓÐ0Îª0£¬ÉÏÊ½Ò²¾ÍÊÇ £¨1000 0000£©&£¨1111 1111£©=100
             -0 0000£¬Èô¸ßÎ»Îª1ÔòÊÇ1¸ßÎ»Îª0ÔòÕâ¸öÊ½×ÓÎª0
 747   3                  else
 748   3                      DAT_Con = 0;
 749   3                  data2 = data2 <<1; //×óÒÆÒ»Î» ½«¸ßÎ»²¹¸øµÍÎ»£¬Èç¹û¶þ½øÖÆÊýÎª01010101 ÄÇÃ´_crol_(1) Îª10101010
 750   3      
 751   3              }
 752   2              CLK_Con = 0;
 753   2              _nop_();
 754   2              CLK_Con = 1;          //ÉÏÉýÑØÈÃ´®ÐÐÊäÈëÊ±ÖÓ±ä³É¸ßµçÆ½ ²¢ÑÓÊ±Ò»¸öÊ±ÖÓÖÜÆÚ
 755   2              _nop_();
 756   2      
 757   2          }
 758   1      
 759   1          /*Î»ÒÆ¼Ä´æÆ÷Íê±Ï£¬×ªÒÆµ½´æ´¢¼Ä´æÆ÷*/
 760   1          RCK_Con = 0;         //ÉÏÉýÑØ£¬´æ´¢¼Ä´æÆ÷±äÎª¸ßµçÆ½ ÑÓ³ÙÁ½¸öÊ±ÖÓÖÜÆÚ
 761   1          Clear_Con = 0;
 762   1          _nop_();
 763   1          _nop_();
 764   1          RCK_Con = 1;
 765   1      }
 766          
 767          void HC595_Data_High()
 768          {
 769   1          DAT_Con = 1;
 770   1      }
 771          void HC595_Data_Low()
 772          {
 773   1          DAT_Con = 0;
 774   1      }
 775          void HC595_SHCP_High()
 776          {
 777   1          CLK_Con = 1;
 778   1      }
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 14  

 779          void HC595_SHCP_Low()
 780          {
 781   1          CLK_Con = 0;
 782   1      }
 783          void HC595_STCP_High()
 784          {
 785   1          RCK_Con = 1;
 786   1      }
 787          void HC595_STCP_Low()
 788          {
 789   1          RCK_Con = 0;
 790   1      }
 791          /***
 792           *74HC595 ·¢ËÍÒ»¸ö×Ö½Ú
 793           *¼´Íù74HC595µÄDSÒý½Å·¢ËÍÒ»¸ö×Ö½Ú
 794          */
 795          void HC595_Send_Byte(unsigned char byte)
 796          {
 797   1          unsigned char i;
 798   1          for (i = 0; i < 8; i ++)  //Ò»¸ö×Ö½Ú8Î»£¬´«Êä8´Î£¬Ò»´ÎÒ»Î»£¬Ñ­»·8´Î£¬¸ÕºÃÒÆÍê8Î»
 799   1          {
 800   2              /****  ²½Öè1£º½«Êý¾Ý´«µ½DSÒý½Å    ****/
 801   2              if (byte & 0x80)        //ÏÈ´«Êä¸ßÎ»£¬Í¨¹ýÓëÔËËãÅÐ¶ÏµÚ°ËÊÇ·ñÎª1
 802   2                  HC595_Data_High();    //Èç¹ûµÚ°ËÎ»ÊÇ1£¬ÔòÓë 595 DSÁ¬½ÓµÄÒý½ÅÊä³ö¸ßµçÆ½
 803   2              else                    //·ñÔòÊä³öµÍµçÆ½
 804   2                  HC595_Data_Low();
 805   2      
 806   2              /*** ²½Öè2£ºSHCPÃ¿²úÉúÒ»¸öÉÏÉýÑØ£¬µ±Ç°µÄbit¾Í±»ËÍÈëÒÆÎ»¼Ä´æÆ÷ ***/
 807   2              HC595_SHCP_Low();   // SHCPÀ­µÍ
 808   2              _nop_();
 809   2              _nop_();;           // ÊÊµ±ÑÓÊ±
 810   2              HC595_SHCP_High();  // SHCPÀ­¸ß£¬ SHCP²úÉúÉÏÉýÑØ
 811   2              _nop_();
 812   2              _nop_();;
 813   2      
 814   2              byte <<= 1;   // ×óÒÆÒ»Î»£¬½«µÍÎ»Íù¸ßÎ»ÒÆ£¬Í¨¹ý if (byte & 0x80)ÅÐ¶ÏµÍÎ»ÊÇ·ñÎª1
 815   2          }
 816   1      }
 817          
 818          /**
 819           *74HC595Êä³öËø´æ Ê¹ÄÜ
 820          **/
 821          void HC595_CS(void)
 822          {
 823   1          /**  ²½Öè3£ºSTCP²úÉúÒ»¸öÉÏÉýÑØ£¬ÒÆÎ»¼Ä´æÆ÷µÄÊý¾ÝÒÆÈë´æ´¢¼Ä´æÆ÷  **/
 824   1          HC595_STCP_Low();   // ½«STCPÀ­µÍ
 825   1          _nop_();
 826   1          _nop_();
 827   1          _nop_();           // ÊÊµ±ÑÓÊ±
 828   1          HC595_STCP_High();  // ÔÙ½«STCPÀ­¸ß£¬STCP¼´¿É²úÉúÒ»¸öÉÏÉýÑØ
 829   1          _nop_();
 830   1          _nop_();
 831   1          _nop_();
 832   1      }
 833          
 834          /**
 835           *·¢ËÍ¶à¸ö×Ö½Ú
 836           *±ãÓÚ¼¶ÁªÊ±Êý¾ÝµÄ·¢ËÍ
 837           *¼¶ÁªN¼¶£¬¾ÍÐèÒª·¢ËÍN¸ö×Ö½Ú¿ØÖÆHC595
 838          ***/
 839          void HC595_Send_Multi_Byte(uint8_t data1, uint8_t data2)
 840          {
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 15  

 841   1          unsigned char i;
 842   1          unsigned char buf[2];
 843   1          buf[0] = data1;
 844   1          buf[1] = data2;
 845   1          Clear_Con = 0;
 846   1          for (i = 0; i < 2; i ++ ) // len ¸ö×Ö½Ú
 847   1          {
 848   2              HC595_Send_Byte(buf[i]);
 849   2          }
 850   1      
 851   1          HC595_CS(); //ÏÈ°ÑËùÓÐ×Ö½Ú·¢ËÍÍê£¬ÔÙÊ¹ÄÜÊä³ö
 852   1      }
 853          
 854          /***********************************************************************************
 855           * º¯ÊýÃû£ºvoid Shutdown_Mode(void)
 856           * ÃèÊö  £º¹Ø»ú
 857           * ÊäÈë  £ºÎÞ
 858           * Êä³ö  £ºÎÞ
 859          ************************************************************************************/
 860          void Shutdown_Mode(void)
 861          {
 862   1          Led_Ram = 0xff;
 863   1          Set_Speak_Value(1);
 864   1          Equipment_Ctrl_Set(0, 6);
 865   1          //Led_Display();                                  // LEDÏÔÊ¾
 866   1          DJ_Con = 0;                                             // ¹Ø±Õµç½â
 867   1          Pow_Con = 0;                                        // ¹Ø±ÕµçÔ´
 868   1      
 869   1          // ±£´æÊý¾Ý
 870   1          All_Use_Time++;                                 // ÀÛ¼ÆÊ¹ÓÃ´ÎÊý
 871   1          Write_DATAFLASH_BYTE();                 // ±£´æÊý¾Ý
 872   1          Equipment_Ctrl_Set(DIA1, 0);//·§ÃÅ¿ª
 873   1          Led_Ram = 0x04;
 874   1          HC595_Send_Multi_Byte(table[Led_Ram], equipment);
 875   1          delay_ms(200);
 876   1      
 877   1      
 878   1      }
 879          
 880          void display_init(void)
 881          {
 882   1      
 883   1          Set_Speak_Value(1);
 884   1          Equipment_Ctrl_Set(0, 6);
 885   1          //Led_Display();                                  // LEDÏÔÊ¾
 886   1          DJ_Con = 0;                                             // ¹Ø±Õµç½â                                   
             -     // ¹Ø±ÕµçÔ´
 887   1          Led_Ram = 0x04;
 888   1          if(Charge_Set == 0)
 889   1              Equipment_Ctrl_Set(LED_GREEN, 0);
 890   1          else
 891   1          {
 892   2              Equipment_Ctrl_Set(LED_GREEN, 1);
 893   2              Equipment_Ctrl_Set(LED_RED, 0);
 894   2          }
 895   1          HC595_Send_Multi_Byte(table[Led_Ram], equipment);
 896   1          delay_10ms(10);
 897   1      
 898   1      
 899   1      }
 900          void Display_Process()
 901          {
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 16  

 902   1      
 903   1          Clear_Con = 0;
 904   1          //equipment = 0x02;
 905   1          Equipment_Ctrl_Set(DIA1, 1);//·§ÃÅ¿ª
 906   1      
 907   1          HC595_Send_Multi_Byte(table[Led_Ram], equipment);
 908   1      }
 909          
 910          
 911          
 912          // ÓÃ»§²Ù×÷
 913          unsigned char key_Count;
 914          void Work_In_Set(uint8_t keycode)               //
 915          {
 916   1          static uint8_t key = 0;//°´¼ü×´Ì¬ÁÙÊ±»ñÈ¡
 917   1          static uint8_t init_time = 0;
 918   1          static uint8_t key_num = 0;                       // Á¬Ðø°´¼ü¼ì²â 5´Îµã°´ Ò»´Î³£°´¼üºó½øÈëISP
 919   1          static uint16_t NoWaterTick;
 920   1          static uint8_t key_hit_flag;
 921   1          static uint32_t timeout,timeout2 ;
 922   1          static uint32_t light_flag;
 923   1          float tmpa;
 924   1          unsigned char tmpb;
 925   1          // Ö÷³ÌÐò
 926   1          switch (Work_Mode)
 927   1          {
 928   2          case 0://¿ª»ú×Ô¼ì
 929   2          {
 930   3              key_num = 0;
 931   3              if(init_time++>=50)
 932   3              {
 933   4                  init_time = 1;
 934   4                  if(Vbat_value <=BATTER_DS )
 935   4                  {
 936   5                      if((systick-timeout)>=20000)
 937   5                      {
 938   6                          timeout = systick;
 939   6                          Shutdown_Mode();
 940   6                      }
 941   5                  }
 942   4                  else if(Vbat_value <=BATTER_ALARM)//µÍÑ¹±¨¾¯
 943   4                  {
 944   5                      if((systick-timeout)>=20000)
 945   5                      {
 946   6      
 947   6                          Equipment_Ctrl_Set(PUMP|SWITCH|DIA1|LED_BLUE, 0);//±Ã¹Ø
 948   6                          Work_Mode = 4;//Òì³£¹¤×÷Ä£Ê½
 949   6                          if(Charge_Set == 0)
 950   6                          {
 951   7                              Equipment_Ctrl_Set(LED_GREEN, 1);//±Ã¹Ø
 952   7                              Equipment_Ctrl_Set(LED_RED, 0);//ºìµÆÁÁ
 953   7                              Set_Speak_Value(4);//
 954   7                          }
 955   6                          timeout = systick;
 956   6                          Led_Ram = 0x04;
 957   6                      }
 958   5                  }
 959   4                  else//Õý³£Æô¶¯
 960   4                  {
 961   5                      Equipment_Ctrl_Set(PUMP|SWITCH|LED_RED|DIA1|LED_BLUE, 0);//±Ã¹Ø
 962   5                      Equipment_Ctrl_Set(LED_GREEN, 0);//ÂÌµÆÁÁ
 963   5                      Led_Ram = 0x04;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 17  

 964   5                      Work_Mode = 1;//Õý³£¹¤×÷Ä£Ê½
 965   5                      //Set_Speak_Value(1);//
 966   5                  }
 967   4              }
 968   3          }
 969   2          break;
 970   2          case 1: //Õý³£¹¤×÷Ä£Ê½
 971   2          {
 972   3          
 973   3              if(Charge_Mode == 0)
 974   3              {
 975   4                  key = keycode&0x0f;
 976   4      //            //******************** ¿ª¹Ø»ú°´¼ü£¬¶Ì°´µç½â£¬³¤°´¿ª¹Ø»ú***************************
 977   4                  if(key==KEY_START_DOWN)//¶Ì°´Ò»´Î
 978   4                  {
 979   5                      key_Count ++;
 980   5                      if(Ele_Flage==0&&vbat_warn_flag ==0)//¿ªÊ¼µç½â
 981   5                      {
 982   6                          if( pump_flag == 0)
 983   6                          {
 984   7                              equipment = equipment|0x01|0x80;
 985   7                              Ele_Time = 0;
 986   7                              Ele_Flage = 1;
 987   7                              DJ_Con = 1;//µç½â
 988   7                              nop_;nop_;nop_;nop_;nop_;nop_;nop_;
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
*** WARNING C275 IN LINE 988 OF Code\bsp_init.c: expression with possibly no effect
 989   7                              tmpa = ELE_TIME*10;
 990   7                              tmpb = (unsigned char)tmpa;
 991   7                              if(tmpb%10>=5)
 992   7      
 993   7                                  Led_Ram = ELE_TIME+1;
 994   7                              else
 995   7                                  Led_Ram = ELE_TIME;
 996   7                              Send_Data_To_UART0(1,DEBUG);
 997   7                              Equipment_Ctrl_Set(0x80, 1);//µÆ¿ª
 998   7                              Equipment_Ctrl_Set(0x01, 1);//µÆ¿ª
 999   7                              Equipment_Ctrl_Set(DIA1, 1);//·§ÃÅ¿ª
1000   7                              Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1001   7                          }
1002   6      
1003   6                      }
1004   5                      else if(Ele_Flage==1)
1005   5                      {
1006   6                          Ele_Time = 0;
1007   6                          Ele_Flage = 0;
1008   6                          Send_Data_To_UART0(2,DEBUG);
1009   6                          Led_Ram = 0;
1010   6                          DJ_Con = 0;//È¡Ïûµç½â
1011   6                          Led_Ram = 0x04;
1012   6                          Equipment_Ctrl_Set(0x80, 0);//·§ÃÅ¿ª
1013   6                          Equipment_Ctrl_Set(0x01, 0);//·§ÃÅ¿ª
1014   6      
1015   6                          Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1016   6                      }
1017   5      
1018   5                      //  Ele_Flage = 0;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 18  

1019   5                      //ÏÔÊ¾
1020   5                  }
1021   4                  else if(key==KEY_START_HOLD) //¹Ø»ú
1022   4                  {
1023   5                      Shutdown_Mode();
1024   5                      Send_Data_To_UART0(3,DEBUG);
1025   5                  }
1026   4                  //******************** ÅçÎíÅÅË®°´¼ü£¬¶Ì°´ÅçÎí**************************
1027   4                  key = keycode&0xf0;
1028   4                  if(key==KEY_HSTART_DOWN)//¶Ì°´Ò»´Î
1029   4                  {
1030   5                      if(pump_flag == 1)//ÕýÔÚÅçÎí
1031   5                      {
1032   6                          Equipment_Ctrl_Set(PUMP, 0);//±Ã¹Ø;
1033   6                          pump_flag = 0;
1034   6                          Send_Data_To_UART0(4,DEBUG);
1035   6      
1036   6                      }
1037   5                      else
1038   5                      {
1039   6                          if(Ele_Flage == 0&&vbat_warn_flag ==0)
1040   6                          {
1041   7                              pump_flag = 1;
1042   7                              Send_Data_To_UART0(5,DEBUG);
1043   7                              Equipment_Ctrl_Set(PUMP, 1);//±Ã¿ª;
1044   7                          }
1045   6      
1046   6                      }
1047   5                  }
1048   4                  else if(key==KEY_HSTART_HOLD) //ÅçÎí
1049   4                  {
1050   5                      if(pump_flag == 0)
1051   5                      {
1052   6                          if(Ele_Flage == 0&&vbat_warn_flag ==0)
1053   6                          {
1054   7                              pump_flag = 1;
1055   7                              Send_Data_To_UART0(6,DEBUG);
1056   7                              Equipment_Ctrl_Set(PUMP, 1);//±Ã¿ª;
1057   7                          }
1058   6                      }
1059   5                  }
1060   4      
1061   4              }
1062   3          }
1063   2      
1064   2          break;
1065   2          case 4:
1066   2          {
1067   3              if(Charge_Mode == 0)
1068   3              {
1069   4                  Work_Mode = 0;
1070   4                  key_num = 0;
1071   4              }
1072   3      
1073   3          }
1074   2          break;
1075   2          case 6:
1076   2          {
1077   3              if(Charge_Mode == 0)
1078   3              {
1079   4                  Shutdown_Mode();
1080   4                  Work_Mode = 0;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 19  

1081   4                  key_num = 0;
1082   4              }
1083   3          }
1084   2          break;
1085   2          }
1086   1      
1087   1          if(Charge_Mode != 0)//³äµç´ý»ú²»¹¤×÷£¬Ö»ÄÜÏÂÔØ³ÌÐò
1088   1          {
1089   2      
1090   2              vbat_warn_flag = 1;
1091   2              Work_Mode = 6;
1092   2              key = keycode&0x0f;
1093   2              if(key==KEY_START_DOWN)//¶Ì°´Ò»´Î
1094   2              {
1095   3                  key_hit_flag = 1;
1096   3                  if(timeout2 <=1000)
1097   3                  {
1098   4                      key_num ++;
1099   4                      if(key_num>=10)//³¬¹ý5´Î½øÈëÉý¼¶Ä£Ê½
1100   4                      {
1101   5                          Send_Data_To_UART0(7,DEBUG);
1102   5                          Set_Speak_Value(6);//Éý¼¶Ä£Ê½ÉùÒô
1103   5                          ISP_Rest();//½øÈëldromÉý¼¶Ä£Ê½
1104   5                          key_num = 0;
1105   5                      }
1106   4                  }
1107   3                  else
1108   3                  {
1109   4                      key_hit_flag = 0;
1110   4                      key_num = 0;
1111   4                      timeout2 = 0;
1112   4                  }
1113   3              }
1114   2              if(key_hit_flag == 1)
1115   2              {
1116   3                  timeout2++;
1117   3      
1118   3              }
1119   2              if(Charge_Mode == 2) //³äÂú
1120   2              {
1121   3                  Work_Mode = 4;
1122   3                  // Shutdown_Mode();//¹Ø»ú
1123   3                  // Charge_Mode = 0;
1124   3              }
1125   2          }
1126   1          else //Õý³£Ä£Ê½
1127   1          {
1128   2              key_hit_flag = 0;
1129   2              //timeout = 0;
1130   2              if(Ele_Flage == 1)//µç½â¼ÆÊ±
1131   2              {
1132   3                  Ele_Time++;
1133   3                  if(Ele_Time%6000==0)//1·ÖÖÓË¢ÐÂÒ»´Î
1134   3                  {
1135   4                      if(Led_Ram>0)
1136   4                          Led_Ram = Led_Ram - 1;
1137   4                  }
1138   3      
1139   3                  if(Ele_Time>=ELE_PERIOD)//µç½âÊ±¼äµ½
1140   3                  {
1141   4                      light_flag = 1;
1142   4                      Ele_Flage = 0;
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 20  

1143   4                      Ele_Time = 0;
1144   4                      Led_Ram = 0;
1145   4                      DJ_Con = 0;
1146   4                      Equipment_Ctrl_Set(0x80, 0);//µÆ¹Ø
1147   4                      Equipment_Ctrl_Set(0x01, 0);//µÆ¹Ø
1148   4                      Equipment_Ctrl_Set(SWITCH, 1);//·§ÃÅ¿ª
1149   4                      Led_Ram = 0x04;
1150   4                      if(Ele_value>MIN_TDSVALUE)  // Ë®ÖÊ²î
1151   4                      {
1152   5      
1153   5                          Send_Data_To_UART0(8,DEBUG);
1154   5                          Set_Speak_Value(5);//±¨¾¯
1155   5                          TDS_Alarm_Num++;                    // TDS±¨¾¯ÊýÖµÀÛ¼ÆÔö¼Ó
1156   5                      }
1157   4                      else
1158   4                      {
1159   5                          Send_Data_To_UART0(9,DEBUG);
1160   5      
1161   5                          Set_Speak_Value(3);//µç½â½áÊø
1162   5                      }
1163   4                  }
1164   3      
1165   3                  if(Now_current<=MIN_CURRENT)//ÎÞË®¼ì²â
1166   3                  {
1167   4                      NoWaterTick++;
1168   4                      if(NoWaterTick>=1000)//³¬¹ý10s
1169   4                      {
1170   5                          Led_Ram = 0x04;
1171   5                          NoWaterTick = 0;
1172   5                          Ele_Flage = 0;
1173   5                          Ele_Time = 0;
1174   5                          DJ_Con = 0;
1175   5                          Equipment_Ctrl_Set(0x80, 0);//µÆ¿ª
1176   5                          Equipment_Ctrl_Set(0x01, 0);//µÆ¿ª
1177   5                          Send_Data_To_UART0(10,DEBUG);
1178   5                          Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1179   5                          Set_Speak_Value(5);//Òì³£±¨¾¯
1180   5                      }
1181   4                  }
1182   3                  else  if(Now_current>=MAX_CURRENT)//¶ÌÂ·±£»¤
1183   3                  {
1184   4                      NoWaterTick++;
1185   4                      if(NoWaterTick>=400)//³¬¹ý10s
1186   4                      {
1187   5                          Led_Ram = 0x04;
1188   5                          NoWaterTick = 0;
1189   5                          Ele_Flage = 0;
1190   5                          Ele_Time = 0;
1191   5                          DJ_Con = 0;
1192   5                          Equipment_Ctrl_Set(0x80, 0);//µÆ¿ª
1193   5                          Equipment_Ctrl_Set(0x01, 0);//µÆ¿ª
1194   5                          Send_Data_To_UART0(11,DEBUG);
1195   5                          Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1196   5                          Set_Speak_Value(5);//Òì³£±¨¾¯
1197   5                      }
1198   4                  }
1199   3                  else
1200   3                  {
1201   4                      if(NoWaterTick>0)
1202   4                          NoWaterTick--;
1203   4                  }
1204   3      
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 21  

1205   3              }
1206   2              else
1207   2              {
1208   3                  if(light_flag == 1)
1209   3                  {
1210   4                      if((Ele_Time++)>=SWITCH_PERIOD)
1211   4                      {
1212   5                          Send_Data_To_UART0(12,DEBUG);
1213   5                          light_flag = 0;
1214   5                          Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1215   5                          Ele_Time = 0;
1216   5                      }
1217   4                  }
1218   3                  else
1219   3                      Equipment_Ctrl_Set(SWITCH, 0);//·§ÃÅ¹Ø
1220   3              }
1221   2      
1222   2          }
1223   1      
1224   1          if(Charge_Mode != 0)//³äµçÄ£Ê½Í£»ú¹¤×÷
1225   1          {
1226   2              vbat_warn_flag = 1;
1227   2              Ele_Flage = 0;
1228   2              Ele_Time = 0;
1229   2              Led_Ram = 0;
1230   2              DJ_Con = 0;
1231   2              Led_Ram = 0x04;
1232   2              Equipment_Ctrl_Set(PUMP|SWITCH|DIA1|LED_BLUE, 0);//Éè±¸¶¼¹Ø
1233   2             // Equipment_Ctrl_Set( LED_GREEN, 0);//Éè±¸¶¼¹Ø
1234   2              // Equipment_Ctrl_Set( LED_RED, 1);//Éè±¸¶¼¹Ø
1235   2          }
1236   1      
1237   1      
1238   1          //·Ç³õÊ¼»¯Ä£Ê½µçÁ¿¼ì²â
1239   1          if(Work_Mode!=0)
1240   1          {
1241   2              if(Vbat_value <= BATTER_DS)
1242   2              {
1243   3      
1244   3                  if((systick-timeout)>=10000)
1245   3                  {
1246   4                      vbat_warn_flag = 1;
1247   4                      timeout = systick;
1248   4                      Shutdown_Mode();
1249   4                      Send_Data_To_UART0(12,DEBUG);
1250   4                  }
1251   3              }
1252   2              else if(Vbat_value <=BATTER_ALARM)//µÍÑ¹±¨¾¯
1253   2              {
1254   3                  if((systick-timeout)>=1000)
1255   3                  {
1256   4                      vbat_warn_flag = 1;
1257   4      
1258   4                      Send_Data_To_UART0(13,DEBUG);
1259   4                      // Led_Ram = 0x04;
1260   4                      //  Equipment_Ctrl_Set(PUMP|SWITCH|DIA1|LED_BLUE, 0);//±Ã¹Ø
1261   4                      Equipment_Ctrl_Set(LED_RED, 0);//ºìµÆÁÁ
1262   4                      Equipment_Ctrl_Set(LED_GREEN, 1);//ÂÌµÆÃð
1263   4                     // Set_Speak_Value(4);// µçÁ¿µÍ
1264   4                      //    Work_Mode = 4;//Òì³£¹¤×÷Ä£Ê½
1265   4                      timeout = systick;
1266   4                  }
C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 22  

1267   3              }
1268   2              else
1269   2              {
1270   3      
1271   3                  timeout = systick;
1272   3                  if(Charge_Mode == 0)
1273   3                  {
1274   4                      vbat_warn_flag = 0;
1275   4                      Equipment_Ctrl_Set(LED_RED, 1);//ºìµÆÃð
1276   4                      Equipment_Ctrl_Set(LED_GREEN, 0);//ÂÌµÆÁÁ
1277   4                  }
1278   3      
1279   3      
1280   3              }
1281   2      
1282   2          }
1283   1      
1284   1      }
1285          // ·¢ËÍ¹¤×÷²ÎÊýµ½¼ì²âÉè±¸
1286          void Send_Info(void)
1287          {
1288   1          static uint8_t sendnum = 0;
1289   1          uint8_t buffer[20];
1290   1          uint16_t ecc, i;
1291   1      
1292   1          if (sendnum++ < 50)
1293   1          {
1294   2              return;
1295   2          }
1296   1          else
1297   1          {
1298   2              sendnum = 0;
1299   2          }
1300   1          buffer[0] = 'D';
1301   1          buffer[1] = 'B';
1302   1          buffer[2] = 'X';
1303   1          buffer[3] = Vcc_value * 10;
1304   1          buffer[4] = Ele_value * 10;
1305   1          buffer[5] = Now_current;
1306   1          // Ð´ÈëÓÃ»§Êý¾Ý
1307   1          buffer[6] = All_Use_Time / 256;
1308   1          buffer[7] = All_Use_Time % 256;
1309   1          buffer[8] = Temp_Alarm_Num / 256;
1310   1          buffer[9] = Temp_Alarm_Num % 256;
1311   1          buffer[10] = TDS_Alarm_Num / 256;
1312   1          buffer[11] = TDS_Alarm_Num % 256;
1313   1      
1314   1          for (i = 0; i < 12; i++)
1315   1          {
1316   2              if (i == 0) ecc = buffer[0];
1317   2              ecc += buffer[i];
1318   2          }
1319   1          buffer[12] = ecc / 256;
1320   1          buffer[13] = ecc % 256;
1321   1          buffer[14] = 0x47;
1322   1          buffer[15] = 0x10;
1323   1          for (i = 0; i < 16; i++)
1324   1          {
1325   2              Send_Data_To_UART0(buffer[i],0);  // UART0 send ascii "U"
1326   2          }
1327   1      }

C51 COMPILER V9.60.0.0   BSP_INIT                                                          11/30/2021 09:56:44 PAGE 23  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7278    ----
   CONSTANT SIZE    =     73    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =    177    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
