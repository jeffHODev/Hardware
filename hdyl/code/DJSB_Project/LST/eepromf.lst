C51 COMPILER V9.60.0.0   EEPROMF                                                           11/30/2021 08:45:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROMF
OBJECT MODULE PLACED IN .\Output\eepromf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\eepromf.c COMPACT OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Include) DEFINE
                    -(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\eepromf.lst) TABS(2) OBJECT(.\Output\eepromf.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "Common.h"
   3          #include "eepromf.h"
   4          #include "Delay.h"
   5          #include "Bsp_init.h"
   6          #include "SFR_Macro.h"
   7          #include "Function_define.h"
   8          
   9          volatile unsigned char xdata page_buffer[24];
  10          
  11          
  12          UINT8 Read_APROM_BYTE(UINT16 code *u16_addr)
  13          {
  14   1        UINT8 rdata;
  15   1        rdata = *u16_addr>>8;
  16   1        return rdata;
  17   1      }
  18          
  19          /*********************************************************************************************************
             -********
  20          write_DATAFLASH_BYTE :
  21          user can copy all this subroutine into project, then call this function in main.
  22          **********************************************************************************************************
             -********/    
  23          void Write_DATAFLASH_BYTE(void)
  24          {
  25   1        unsigned char looptmp=0;
  26   1        unsigned int u16_addrl_r;
  27   1        
  28   1      //Check page start address
  29   1        u16_addrl_r=(ADDR_BASE/128)*128;
  30   1      //Save APROM data to XRAM0
  31   1      //  for(looptmp=0;looptmp<0x80;looptmp++)
  32   1      //  {
  33   1      //    RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r+looptmp));
  34   1      //    page_buffer[looptmp]=RAMtmp;
  35   1      //  }
  36   1      // Modify customer data in XRAM
  37   1        page_buffer[FLASH_ALLUSED_LOW&0x7f]  = All_Use_Time%256;
  38   1        page_buffer[FLASH_ALLUSED_HIGH&0x7f] = All_Use_Time/256;
  39   1        page_buffer[FLASH_TEMPALA_LOW&0x7f]  = Temp_Alarm_Num%256;
  40   1        page_buffer[FLASH_TEMPALA_HIGH&0x7f] = Temp_Alarm_Num/256;
  41   1        page_buffer[FLASH_TDSALAR_LOW&0x7f]  = TDS_Alarm_Num%256;
  42   1        page_buffer[FLASH_TDSALAR_HIGH&0x7f] = TDS_Alarm_Num/256;
  43   1        
  44   1      //Erase APROM DATAFLASH page
  45   1          IAPAL = u16_addrl_r&0xff;
  46   1          IAPAH = (u16_addrl_r>>8)&0xff;
  47   1          IAPFD = 0xFF;
  48   1          set_IAPEN; 
  49   1          set_APUEN;
  50   1          IAPCN = 0x22;     
  51   1          set_IAPGO; 
  52   1          
C51 COMPILER V9.60.0.0   EEPROMF                                                           11/30/2021 08:45:06 PAGE 2   

  53   1      //Save changed RAM data to APROM DATAFLASH
  54   1          set_IAPEN; 
  55   1          set_APUEN;
  56   1          IAPCN = 0x21;
  57   1          for(looptmp=0;looptmp<24;looptmp++)
  58   1          {
  59   2            IAPAL = (u16_addrl_r&0xff)+looptmp;
  60   2            IAPAH = (u16_addrl_r>>8)&0xff;
  61   2            IAPFD = page_buffer[looptmp];
  62   2            set_IAPGO;      
  63   2          }
  64   1          clr_APUEN;
  65   1          clr_IAPEN;
  66   1      } 
  67          
  68          void Read_EEprom(void)
  69          {
  70   1        All_Use_Time=((Read_APROM_BYTE(FLASH_ALLUSED_HIGH)<<8)+Read_APROM_BYTE(FLASH_ALLUSED_LOW));       // ç´¯è®¡ä
             -½¿ç”¨æ¬¡æ•°
  71   1        Temp_Alarm_Num=((Read_APROM_BYTE(FLASH_TEMPALA_HIGH)<<8)+Read_APROM_BYTE(FLASH_TEMPALA_LOW));     // æ¸©åº¦
             -æŠ¥è­¦æ•°å€?
  72   1        TDS_Alarm_Num=((Read_APROM_BYTE(FLASH_TDSALAR_HIGH)<<8)+Read_APROM_BYTE(FLASH_TDSALAR_LOW ));;    // TDSæŠ¥
             -è­¦æ•°å€?
  73   1        if(TDS_Alarm_Num==0xffff||Temp_Alarm_Num==0xffff)
  74   1        {
  75   2          All_Use_Time=0;Temp_Alarm_Num=0;TDS_Alarm_Num=0;    
  76   2          Write_DATAFLASH_BYTE();
  77   2        
  78   2          //Led_Display();
  79   2          delay_ms(500);
  80   2        }
  81   1      }
  82          
  83          
  84          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    584    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =      6    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
