package com.nivi.nivifilter;

public class SerialBeanFilterPcg {
//    private static final float a[][] = { //bandpass 0.8-45HZ FS = 208.33HZ order = 20
//            {1.00f, -0.370318446587311f, 0.741478258957100f},
//            {1.00f, -1.99211045270079f, 0.992691251097329f},
//            {1.00f, -1.97813735918714f, 0.978720138504178f},
//            {1.00f, -0.303836010245745f, 0.396141510323030f},
//            {1.00f, -1.96589499787464f, 0.966484463319507f},
//            {1.00f, -0.269347771736051f, 0.191811440530334f},
//            {1.00f, -1.95659325720995f, 0.957190946668250f},
//            {1.00f, -0.252425806991956f, 0.0750553756709697f},
//            {1.00f, -1.95150152828687f, 0.952104884031380f},
//            {1.00f, -0.245649105385984f, 0.0214847444052265f}
//    }; //共十级二阶滤波，分母

//    private static final float a[][] = { //bandpass 0.8-35HZ FS = 208.33HZ order = 20
//            {1.00f, -0.872797284332393f, 0.768870757759665f},
//            {1.00f, -1.99218980957446f, 0.992770914722481f},
//            {1.00f, -1.97828928636842f, 0.978874599519219f},
//            {1.00f, -0.722630142967546f, 0.448798633178355f},
//            {1.00f, -1.96591726119019f, 0.966513250522468f},
//            {1.00f, -0.636480681929170f, 0.253241104144337f},
//            {1.00f, -1.95630826689472f, 0.956917127644367f},
//            {1.00f, -0.589721191597952f, 0.139454521090381f},
//            {1.00f, -1.95094030474106f, 0.951558121539833f},
//            {1.00f, -0.569316299566317f, 0.0867536194006823f}
//    };

    private static final double a[][] = { //pcgfiltr highpass 19 fs833
            {1.00, -1.95756015186814, 0.977836695002051},
            {1.00, -1.91562625424199, 0.935468443170652},
            {1.00, -1.87691116794895, 0.896352343342266},
            {1.00, -1.84203396540033, 0.861113880322958},
            {1.00, -1.81147026768147, 0.830233601714087},
            {1.00, -1.78557539310957, 0.804070506244508},
            {1.00, -1.76460704140067, 0.782884962901690},
            {1.00, -1.74874566646993, 0.766859294754906},
            {1.00, -1.73811143670161, 0.756114914900829},
            {1.00, -1.73277720113503, 0.750725426954171},
    };

//    private static final double a[][] = { //pcgfiltr bandpass 19-416 fs833
//            {1.00f, 1.99840792555584f, 0.998433046463819f},
//            {1.00f, -1.93628236815276f, 0.956322850680709f},
//            {1.00f, 1.99543361203535f, 0.995458698831731f},
//            {1.00f, -1.85904093820964f, 0.878284500157908f},
//            {1.00f, 1.99290915193587f, 0.992934212293507f},
//            {1.00f, -1.79799433653619f, 0.816609941081766f},
//            {1.00f, 1.99107784474175f, 0.991102887369783f},
//            {1.00f, -1.75606991889349f, 0.774255324998761f},
//            {1.00f, 1.99011591593121f, 0.990140949736062f},
//            {1.00f, -1.73479223598667f, 0.752759658909486f},
//    };

//    private static final double b[] = { 1.00f, 0.00f, -1.00f }; //第一级二阶滤波，分子

    private static final double b[] = { 1.00, -2.00, 1.00}; //pcgfiltr highpass 19 fs833

//    private static final double gain[] = {
//            0.576024030153927f,
//            0.576024030153927f,
//            0.515000895704627f,
//            0.515000895704627f,
//            0.475978866002799f,
//            0.475978866002799f,
//            0.452609656011184f,
//            0.452609656011184f,
//            0.441626827758793f,
//            0.441626827758793f
//    }; //bandpass 0.8-45HZ FS = 208.33HZ order = 20

//    private static final double gain[] = {
//            0.463071375715916f,
//            0.463071375715916f,
//            0.418371031109980f,
//            0.418371031109980f,
//            0.389068666148473f,
//            0.389068666148473f,
//            0.371264810549292f,
//            0.371264810549292f,
//            0.362833597761529f,
//            0.362833597761529f
//    }; //bandpass 0.8-35HZ FS = 208.33HZ order = 20

//    private static final double gain[] = { //pcgfiltr bandpass 19-416 fs833
//            0.985925991368341f,
//            0.985925991368341f,
//            0.965404969494440f,
//            0.965404969494440f,
//            0.948921923642746f,
//            0.948921923642746f,
//            0.937462231059637f,
//            0.937462231059637f,
//            0.931601629937284f,
//            0.931601629937284f
//    };

    private static final double gain[] = { //pcgfiltr highpass 19 fs833
            0.983849211717548,
            0.962773674353160,
            0.943315877822804,
            0.925786961430822,
            0.910425967348889,
            0.897411474838521,
            0.886873001075590,
            0.878901240306209,
            0.873556587900609,
            0.870875657022301
    };

    public static double[] m00 = {0};
    public static double[] m01 = {0};

    public static double[] m10 = {0};
    public static double[] m11 = {0};

    public static double[] m20 = {0};
    public static double[] m21 = {0};

    public static double[] m30 = {0};
    public static double[] m31 = {0};

    public static double[] m40 = {0};
    public static double[] m41 = {0};

    public static double[] m50 = {0};
    public static double[] m51 = {0};

    public static double[] m60 = {0};
    public static double[] m61 = {0};

    public static double[] m70 = {0};
    public static double[] m71 = {0};

    public static double[] m80 = {0};
    public static double[] m81 = {0};

    public static double[] m90 = {0};
    public static double[] m91 = {0};

    public static float serialBeanFilter(float x) {
        double y0 = filterOrder2(x, m00, m01, a[0], b, gain[0]);  //第一级二阶滤波
        double y1 = filterOrder2(y0, m10, m11, a[1], b, gain[1]);  //第二级二阶滤波
        double y2 = filterOrder2(y1, m20, m21, a[2], b, gain[2]);  //第二级二阶滤波
        double y3 = filterOrder2(y2, m30, m31, a[3], b, gain[3]);  //第二级二阶滤波
        double y4 = filterOrder2(y3, m40, m41, a[4], b, gain[4]);  //第二级二阶滤波
        double y5 = filterOrder2(y4, m50, m51, a[5], b, gain[5]);  //第二级二阶滤波
        double y6 = filterOrder2(y5, m60, m61, a[6], b, gain[6]);  //第二级二阶滤波
        double y7 = filterOrder2(y6, m70, m71, a[7], b, gain[7]);  //第二级二阶滤波
        double y8 = filterOrder2(y7, m80, m81, a[8], b, gain[8]);  //第二级二阶滤波
        double y9 = filterOrder2(y8, m90, m91, a[9], b, gain[9]);  //第二级二阶滤波

        return (float)y9;
    }

    /*
    x: input
    m1:保存中间滤波器数据
    m2:保存中间滤波器数据
    a:滤波器系数
    b:滤波器系数
    gain:增益，对于只支持定点小数运算的，需要把增益分配到每个二阶IIR滤波器的系数中，使得每次中间的结果都不溢出，即使其频率响应的最大值最接近0dB
    */
    public static double filterOrder2(double x, double[] m1, double[] m2, double[] a, double[] b, double gain){
        double y, m;
        //计算没有增益的滤波输出，存于y_
        m = x - a[1] * m1[0] - a[2] * m2[0];    //求当前m，同时作为求y_的中间步骤
        y = m + b[1] * m1[0] + b[2] * m2[0];
        //更新*m_1和*m_2
        m2[0] = m1[0];
        m1[0] = m;
        //返回带增益的滤波输出
        return y * gain;
    }
}
