package com.hekangyuan.nivi1000.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hekangyuan.nivi1000.model.dbbean.PatientdbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENTDB_BEAN".
*/
public class PatientdbBeanDao extends AbstractDao<PatientdbBean, Long> {

    public static final String TABLENAME = "PATIENTDB_BEAN";

    /**
     * Properties of entity PatientdbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CaseNo = new Property(1, String.class, "caseNo", false, "CASE_NO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(3, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Nationality = new Property(5, String.class, "nationality", false, "NATIONALITY");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property UniqueId = new Property(8, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
    }

    private DaoSession daoSession;


    public PatientdbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PatientdbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENTDB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CASE_NO\" TEXT," + // 1: caseNo
                "\"NAME\" TEXT," + // 2: name
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"NATIONALITY\" TEXT," + // 5: nationality
                "\"ADDRESS\" TEXT," + // 6: address
                "\"PHONE\" TEXT," + // 7: phone
                "\"UNIQUE_ID\" TEXT," + // 8: uniqueId
                "\"CREATE_DATE\" TEXT);"); // 9: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENTDB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatientdbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(2, caseNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(6, nationality);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(9, uniqueId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatientdbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(2, caseNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(6, nationality);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(9, uniqueId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
    }

    @Override
    protected final void attachEntity(PatientdbBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatientdbBean readEntity(Cursor cursor, int offset) {
        PatientdbBean entity = new PatientdbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caseNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nationality
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uniqueId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatientdbBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCaseNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNationality(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUniqueId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatientdbBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatientdbBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatientdbBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
