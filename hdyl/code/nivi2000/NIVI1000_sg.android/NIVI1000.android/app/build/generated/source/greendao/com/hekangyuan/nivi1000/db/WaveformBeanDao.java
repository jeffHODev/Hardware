package com.hekangyuan.nivi1000.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hekangyuan.nivi1000.model.dbbean.PatientCheckDataBean;

import com.hekangyuan.nivi1000.model.dbbean.WaveformBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAVEFORM_BEAN".
*/
public class WaveformBeanDao extends AbstractDao<WaveformBean, Long> {

    public static final String TABLENAME = "WAVEFORM_BEAN";

    /**
     * Properties of entity WaveformBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CheckId = new Property(1, Long.class, "checkId", false, "CHECK_ID");
        public final static Property IdCard = new Property(2, String.class, "idCard", false, "ID_CARD");
        public final static Property Hypecgs = new Property(3, String.class, "hypecgs", false, "HYPECGS");
        public final static Property Hyppcgs = new Property(4, String.class, "hyppcgs", false, "HYPPCGS");
        public final static Property Hypapgs = new Property(5, String.class, "hypapgs", false, "HYPAPGS");
        public final static Property Hypecgd = new Property(6, String.class, "hypecgd", false, "HYPECGD");
        public final static Property Hyppcgd = new Property(7, String.class, "hyppcgd", false, "HYPPCGD");
        public final static Property Hypapgd = new Property(8, String.class, "hypapgd", false, "HYPAPGD");
        public final static Property Ecg_pl = new Property(9, String.class, "ecg_pl", false, "ECG_PL");
        public final static Property Pcg_pl = new Property(10, String.class, "pcg_pl", false, "PCG_PL");
        public final static Property Apg_l = new Property(11, String.class, "apg_l", false, "APG_L");
        public final static Property Ecg_pr = new Property(12, String.class, "ecg_pr", false, "ECG_PR");
        public final static Property Pcg_pr = new Property(13, String.class, "pcg_pr", false, "PCG_PR");
        public final static Property Arg_r = new Property(14, String.class, "arg_r", false, "ARG_R");
        public final static Property Ecg_th = new Property(15, String.class, "ecg_th", false, "ECG_TH");
        public final static Property Apg_th = new Property(16, String.class, "apg_th", false, "APG_TH");
    }

    private DaoSession daoSession;


    public WaveformBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WaveformBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAVEFORM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECK_ID\" INTEGER NOT NULL ," + // 1: checkId
                "\"ID_CARD\" TEXT," + // 2: idCard
                "\"HYPECGS\" TEXT," + // 3: hypecgs
                "\"HYPPCGS\" TEXT," + // 4: hyppcgs
                "\"HYPAPGS\" TEXT," + // 5: hypapgs
                "\"HYPECGD\" TEXT," + // 6: hypecgd
                "\"HYPPCGD\" TEXT," + // 7: hyppcgd
                "\"HYPAPGD\" TEXT," + // 8: hypapgd
                "\"ECG_PL\" TEXT," + // 9: ecg_pl
                "\"PCG_PL\" TEXT," + // 10: pcg_pl
                "\"APG_L\" TEXT," + // 11: apg_l
                "\"ECG_PR\" TEXT," + // 12: ecg_pr
                "\"PCG_PR\" TEXT," + // 13: pcg_pr
                "\"ARG_R\" TEXT," + // 14: arg_r
                "\"ECG_TH\" TEXT," + // 15: ecg_th
                "\"APG_TH\" TEXT);"); // 16: apg_th
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAVEFORM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaveformBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCheckId());
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(3, idCard);
        }
 
        String hypecgs = entity.getHypecgs();
        if (hypecgs != null) {
            stmt.bindString(4, hypecgs);
        }
 
        String hyppcgs = entity.getHyppcgs();
        if (hyppcgs != null) {
            stmt.bindString(5, hyppcgs);
        }
 
        String hypapgs = entity.getHypapgs();
        if (hypapgs != null) {
            stmt.bindString(6, hypapgs);
        }
 
        String hypecgd = entity.getHypecgd();
        if (hypecgd != null) {
            stmt.bindString(7, hypecgd);
        }
 
        String hyppcgd = entity.getHyppcgd();
        if (hyppcgd != null) {
            stmt.bindString(8, hyppcgd);
        }
 
        String hypapgd = entity.getHypapgd();
        if (hypapgd != null) {
            stmt.bindString(9, hypapgd);
        }
 
        String ecg_pl = entity.getEcg_pl();
        if (ecg_pl != null) {
            stmt.bindString(10, ecg_pl);
        }
 
        String pcg_pl = entity.getPcg_pl();
        if (pcg_pl != null) {
            stmt.bindString(11, pcg_pl);
        }
 
        String apg_l = entity.getApg_l();
        if (apg_l != null) {
            stmt.bindString(12, apg_l);
        }
 
        String ecg_pr = entity.getEcg_pr();
        if (ecg_pr != null) {
            stmt.bindString(13, ecg_pr);
        }
 
        String pcg_pr = entity.getPcg_pr();
        if (pcg_pr != null) {
            stmt.bindString(14, pcg_pr);
        }
 
        String arg_r = entity.getArg_r();
        if (arg_r != null) {
            stmt.bindString(15, arg_r);
        }
 
        String ecg_th = entity.getEcg_th();
        if (ecg_th != null) {
            stmt.bindString(16, ecg_th);
        }
 
        String apg_th = entity.getApg_th();
        if (apg_th != null) {
            stmt.bindString(17, apg_th);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaveformBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCheckId());
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(3, idCard);
        }
 
        String hypecgs = entity.getHypecgs();
        if (hypecgs != null) {
            stmt.bindString(4, hypecgs);
        }
 
        String hyppcgs = entity.getHyppcgs();
        if (hyppcgs != null) {
            stmt.bindString(5, hyppcgs);
        }
 
        String hypapgs = entity.getHypapgs();
        if (hypapgs != null) {
            stmt.bindString(6, hypapgs);
        }
 
        String hypecgd = entity.getHypecgd();
        if (hypecgd != null) {
            stmt.bindString(7, hypecgd);
        }
 
        String hyppcgd = entity.getHyppcgd();
        if (hyppcgd != null) {
            stmt.bindString(8, hyppcgd);
        }
 
        String hypapgd = entity.getHypapgd();
        if (hypapgd != null) {
            stmt.bindString(9, hypapgd);
        }
 
        String ecg_pl = entity.getEcg_pl();
        if (ecg_pl != null) {
            stmt.bindString(10, ecg_pl);
        }
 
        String pcg_pl = entity.getPcg_pl();
        if (pcg_pl != null) {
            stmt.bindString(11, pcg_pl);
        }
 
        String apg_l = entity.getApg_l();
        if (apg_l != null) {
            stmt.bindString(12, apg_l);
        }
 
        String ecg_pr = entity.getEcg_pr();
        if (ecg_pr != null) {
            stmt.bindString(13, ecg_pr);
        }
 
        String pcg_pr = entity.getPcg_pr();
        if (pcg_pr != null) {
            stmt.bindString(14, pcg_pr);
        }
 
        String arg_r = entity.getArg_r();
        if (arg_r != null) {
            stmt.bindString(15, arg_r);
        }
 
        String ecg_th = entity.getEcg_th();
        if (ecg_th != null) {
            stmt.bindString(16, ecg_th);
        }
 
        String apg_th = entity.getApg_th();
        if (apg_th != null) {
            stmt.bindString(17, apg_th);
        }
    }

    @Override
    protected final void attachEntity(WaveformBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WaveformBean readEntity(Cursor cursor, int offset) {
        WaveformBean entity = new WaveformBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // checkId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idCard
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hypecgs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hyppcgs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hypapgs
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hypecgd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hyppcgd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hypapgd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ecg_pl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pcg_pl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // apg_l
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ecg_pr
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pcg_pr
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // arg_r
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ecg_th
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // apg_th
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaveformBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheckId(cursor.getLong(offset + 1));
        entity.setIdCard(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHypecgs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHyppcgs(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHypapgs(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHypecgd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHyppcgd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHypapgd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEcg_pl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPcg_pl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setApg_l(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEcg_pr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPcg_pr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setArg_r(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEcg_th(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setApg_th(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WaveformBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WaveformBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WaveformBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPatientCheckDataBeanDao().getAllColumns());
            builder.append(" FROM WAVEFORM_BEAN T");
            builder.append(" LEFT JOIN PATIENT_CHECK_DATA_BEAN T0 ON T.\"CHECK_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WaveformBean loadCurrentDeep(Cursor cursor, boolean lock) {
        WaveformBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PatientCheckDataBean check = loadCurrentOther(daoSession.getPatientCheckDataBeanDao(), cursor, offset);
         if(check != null) {
            entity.setCheck(check);
        }

        return entity;    
    }

    public WaveformBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WaveformBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WaveformBean> list = new ArrayList<WaveformBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WaveformBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WaveformBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
