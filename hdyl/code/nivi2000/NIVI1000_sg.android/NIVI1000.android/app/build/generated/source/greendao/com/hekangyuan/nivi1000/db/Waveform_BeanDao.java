package com.hekangyuan.nivi1000.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hekangyuan.nivi1000.model.Waveform_Bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAVEFORM__BEAN".
*/
public class Waveform_BeanDao extends AbstractDao<Waveform_Bean, Long> {

    public static final String TABLENAME = "WAVEFORM__BEAN";

    /**
     * Properties of entity Waveform_Bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Waveform_id = new Property(0, Long.class, "waveform_id", true, "_id");
        public final static Property IdCard = new Property(1, String.class, "idCard", false, "ID_CARD");
        public final static Property Hypecgs = new Property(2, String.class, "hypecgs", false, "HYPECGS");
        public final static Property Hyppcgs = new Property(3, String.class, "hyppcgs", false, "HYPPCGS");
        public final static Property Hypapgs = new Property(4, String.class, "hypapgs", false, "HYPAPGS");
        public final static Property Hypecgd = new Property(5, String.class, "hypecgd", false, "HYPECGD");
        public final static Property Hyppcgd = new Property(6, String.class, "hyppcgd", false, "HYPPCGD");
        public final static Property Hypapgd = new Property(7, String.class, "hypapgd", false, "HYPAPGD");
        public final static Property Ecg_pl = new Property(8, String.class, "ecg_pl", false, "ECG_PL");
        public final static Property Pcg_pl = new Property(9, String.class, "pcg_pl", false, "PCG_PL");
        public final static Property Apg_l = new Property(10, String.class, "apg_l", false, "APG_L");
        public final static Property Ecg_pr = new Property(11, String.class, "ecg_pr", false, "ECG_PR");
        public final static Property Pcg_pr = new Property(12, String.class, "pcg_pr", false, "PCG_PR");
        public final static Property Arg_r = new Property(13, String.class, "arg_r", false, "ARG_R");
        public final static Property Ecg_th = new Property(14, String.class, "ecg_th", false, "ECG_TH");
        public final static Property Apg_th = new Property(15, String.class, "apg_th", false, "APG_TH");
    }


    public Waveform_BeanDao(DaoConfig config) {
        super(config);
    }
    
    public Waveform_BeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAVEFORM__BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: waveform_id
                "\"ID_CARD\" TEXT NOT NULL ," + // 1: idCard
                "\"HYPECGS\" TEXT NOT NULL ," + // 2: hypecgs
                "\"HYPPCGS\" TEXT NOT NULL ," + // 3: hyppcgs
                "\"HYPAPGS\" TEXT NOT NULL ," + // 4: hypapgs
                "\"HYPECGD\" TEXT NOT NULL ," + // 5: hypecgd
                "\"HYPPCGD\" TEXT NOT NULL ," + // 6: hyppcgd
                "\"HYPAPGD\" TEXT NOT NULL ," + // 7: hypapgd
                "\"ECG_PL\" TEXT NOT NULL ," + // 8: ecg_pl
                "\"PCG_PL\" TEXT NOT NULL ," + // 9: pcg_pl
                "\"APG_L\" TEXT NOT NULL ," + // 10: apg_l
                "\"ECG_PR\" TEXT NOT NULL ," + // 11: ecg_pr
                "\"PCG_PR\" TEXT NOT NULL ," + // 12: pcg_pr
                "\"ARG_R\" TEXT NOT NULL ," + // 13: arg_r
                "\"ECG_TH\" TEXT NOT NULL ," + // 14: ecg_th
                "\"APG_TH\" TEXT NOT NULL );"); // 15: apg_th
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAVEFORM__BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Waveform_Bean entity) {
        stmt.clearBindings();
 
        Long waveform_id = entity.getWaveform_id();
        if (waveform_id != null) {
            stmt.bindLong(1, waveform_id);
        }
        stmt.bindString(2, entity.getIdCard());
        stmt.bindString(3, entity.getHypecgs());
        stmt.bindString(4, entity.getHyppcgs());
        stmt.bindString(5, entity.getHypapgs());
        stmt.bindString(6, entity.getHypecgd());
        stmt.bindString(7, entity.getHyppcgd());
        stmt.bindString(8, entity.getHypapgd());
        stmt.bindString(9, entity.getEcg_pl());
        stmt.bindString(10, entity.getPcg_pl());
        stmt.bindString(11, entity.getApg_l());
        stmt.bindString(12, entity.getEcg_pr());
        stmt.bindString(13, entity.getPcg_pr());
        stmt.bindString(14, entity.getArg_r());
        stmt.bindString(15, entity.getEcg_th());
        stmt.bindString(16, entity.getApg_th());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Waveform_Bean entity) {
        stmt.clearBindings();
 
        Long waveform_id = entity.getWaveform_id();
        if (waveform_id != null) {
            stmt.bindLong(1, waveform_id);
        }
        stmt.bindString(2, entity.getIdCard());
        stmt.bindString(3, entity.getHypecgs());
        stmt.bindString(4, entity.getHyppcgs());
        stmt.bindString(5, entity.getHypapgs());
        stmt.bindString(6, entity.getHypecgd());
        stmt.bindString(7, entity.getHyppcgd());
        stmt.bindString(8, entity.getHypapgd());
        stmt.bindString(9, entity.getEcg_pl());
        stmt.bindString(10, entity.getPcg_pl());
        stmt.bindString(11, entity.getApg_l());
        stmt.bindString(12, entity.getEcg_pr());
        stmt.bindString(13, entity.getPcg_pr());
        stmt.bindString(14, entity.getArg_r());
        stmt.bindString(15, entity.getEcg_th());
        stmt.bindString(16, entity.getApg_th());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Waveform_Bean readEntity(Cursor cursor, int offset) {
        Waveform_Bean entity = new Waveform_Bean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // waveform_id
            cursor.getString(offset + 1), // idCard
            cursor.getString(offset + 2), // hypecgs
            cursor.getString(offset + 3), // hyppcgs
            cursor.getString(offset + 4), // hypapgs
            cursor.getString(offset + 5), // hypecgd
            cursor.getString(offset + 6), // hyppcgd
            cursor.getString(offset + 7), // hypapgd
            cursor.getString(offset + 8), // ecg_pl
            cursor.getString(offset + 9), // pcg_pl
            cursor.getString(offset + 10), // apg_l
            cursor.getString(offset + 11), // ecg_pr
            cursor.getString(offset + 12), // pcg_pr
            cursor.getString(offset + 13), // arg_r
            cursor.getString(offset + 14), // ecg_th
            cursor.getString(offset + 15) // apg_th
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Waveform_Bean entity, int offset) {
        entity.setWaveform_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdCard(cursor.getString(offset + 1));
        entity.setHypecgs(cursor.getString(offset + 2));
        entity.setHyppcgs(cursor.getString(offset + 3));
        entity.setHypapgs(cursor.getString(offset + 4));
        entity.setHypecgd(cursor.getString(offset + 5));
        entity.setHyppcgd(cursor.getString(offset + 6));
        entity.setHypapgd(cursor.getString(offset + 7));
        entity.setEcg_pl(cursor.getString(offset + 8));
        entity.setPcg_pl(cursor.getString(offset + 9));
        entity.setApg_l(cursor.getString(offset + 10));
        entity.setEcg_pr(cursor.getString(offset + 11));
        entity.setPcg_pr(cursor.getString(offset + 12));
        entity.setArg_r(cursor.getString(offset + 13));
        entity.setEcg_th(cursor.getString(offset + 14));
        entity.setApg_th(cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Waveform_Bean entity, long rowId) {
        entity.setWaveform_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Waveform_Bean entity) {
        if(entity != null) {
            return entity.getWaveform_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Waveform_Bean entity) {
        return entity.getWaveform_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
