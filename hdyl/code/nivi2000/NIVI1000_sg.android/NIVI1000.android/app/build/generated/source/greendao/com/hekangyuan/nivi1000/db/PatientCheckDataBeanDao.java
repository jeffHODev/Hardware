package com.hekangyuan.nivi1000.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.hekangyuan.nivi1000.model.dbbean.PatientdbBean;

import com.hekangyuan.nivi1000.model.dbbean.PatientCheckDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT_CHECK_DATA_BEAN".
*/
public class PatientCheckDataBeanDao extends AbstractDao<PatientCheckDataBean, Long> {

    public static final String TABLENAME = "PATIENT_CHECK_DATA_BEAN";

    /**
     * Properties of entity PatientCheckDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CaseNo = new Property(1, String.class, "caseNo", false, "CASE_NO");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(3, int.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Nationality = new Property(5, String.class, "nationality", false, "NATIONALITY");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property UniqueId = new Property(8, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
        public final static Property HospitalId = new Property(10, String.class, "hospitalId", false, "HOSPITAL_ID");
        public final static Property DelFlag = new Property(11, int.class, "delFlag", false, "DEL_FLAG");
        public final static Property Height = new Property(12, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(13, int.class, "weight", false, "WEIGHT");
        public final static Property Ps = new Property(14, int.class, "ps", false, "PS");
        public final static Property Pd = new Property(15, int.class, "pd", false, "PD");
        public final static Property BrPs = new Property(16, int.class, "brPs", false, "BR_PS");
        public final static Property BrPd = new Property(17, int.class, "brPd", false, "BR_PD");
        public final static Property AlPs = new Property(18, int.class, "alPs", false, "AL_PS");
        public final static Property AlPd = new Property(19, int.class, "alPd", false, "AL_PD");
        public final static Property ArPs = new Property(20, int.class, "arPs", false, "AR_PS");
        public final static Property ArPd = new Property(21, int.class, "arPd", false, "AR_PD");
        public final static Property Pcmpt = new Property(22, int.class, "pcmpt", false, "PCMPT");
        public final static Property Pexpd = new Property(23, int.class, "pexpd", false, "PEXPD");
        public final static Property Pavrg = new Property(24, int.class, "pavrg", false, "PAVRG");
        public final static Property Hypecgs = new Property(25, String.class, "hypecgs", false, "HYPECGS");
        public final static Property Hyppcgs = new Property(26, String.class, "hyppcgs", false, "HYPPCGS");
        public final static Property Hypapgs = new Property(27, String.class, "hypapgs", false, "HYPAPGS");
        public final static Property Hypecgd = new Property(28, String.class, "hypecgd", false, "HYPECGD");
        public final static Property Hyppcgd = new Property(29, String.class, "hyppcgd", false, "HYPPCGD");
        public final static Property Hypapgd = new Property(30, String.class, "hypapgd", false, "HYPAPGD");
        public final static Property EcgPl = new Property(31, String.class, "ecgPl", false, "ECG_PL");
        public final static Property PcgPl = new Property(32, String.class, "pcgPl", false, "PCG_PL");
        public final static Property ApgL = new Property(33, String.class, "apgL", false, "APG_L");
        public final static Property EcgPr = new Property(34, String.class, "ecgPr", false, "ECG_PR");
        public final static Property PcgPr = new Property(35, String.class, "pcgPr", false, "PCG_PR");
        public final static Property ArgR = new Property(36, String.class, "argR", false, "ARG_R");
        public final static Property EcgTh = new Property(37, String.class, "ecgTh", false, "ECG_TH");
        public final static Property ApgTh = new Property(38, String.class, "apgTh", false, "APG_TH");
        public final static Property BasisMeasurementId = new Property(39, String.class, "basisMeasurementId", false, "BASIS_MEASUREMENT_ID");
        public final static Property PatientId = new Property(40, Long.class, "patientId", false, "PATIENT_ID");
    }

    private DaoSession daoSession;

    private Query<PatientCheckDataBean> patientdbBean_ChecksQuery;

    public PatientCheckDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PatientCheckDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT_CHECK_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CASE_NO\" TEXT," + // 1: caseNo
                "\"NAME\" TEXT," + // 2: name
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"NATIONALITY\" TEXT," + // 5: nationality
                "\"ADDRESS\" TEXT," + // 6: address
                "\"PHONE\" TEXT," + // 7: phone
                "\"UNIQUE_ID\" TEXT," + // 8: uniqueId
                "\"CREATE_DATE\" TEXT," + // 9: createDate
                "\"HOSPITAL_ID\" TEXT," + // 10: hospitalId
                "\"DEL_FLAG\" INTEGER NOT NULL ," + // 11: delFlag
                "\"HEIGHT\" INTEGER NOT NULL ," + // 12: height
                "\"WEIGHT\" INTEGER NOT NULL ," + // 13: weight
                "\"PS\" INTEGER NOT NULL ," + // 14: ps
                "\"PD\" INTEGER NOT NULL ," + // 15: pd
                "\"BR_PS\" INTEGER NOT NULL ," + // 16: brPs
                "\"BR_PD\" INTEGER NOT NULL ," + // 17: brPd
                "\"AL_PS\" INTEGER NOT NULL ," + // 18: alPs
                "\"AL_PD\" INTEGER NOT NULL ," + // 19: alPd
                "\"AR_PS\" INTEGER NOT NULL ," + // 20: arPs
                "\"AR_PD\" INTEGER NOT NULL ," + // 21: arPd
                "\"PCMPT\" INTEGER NOT NULL ," + // 22: pcmpt
                "\"PEXPD\" INTEGER NOT NULL ," + // 23: pexpd
                "\"PAVRG\" INTEGER NOT NULL ," + // 24: pavrg
                "\"HYPECGS\" TEXT," + // 25: hypecgs
                "\"HYPPCGS\" TEXT," + // 26: hyppcgs
                "\"HYPAPGS\" TEXT," + // 27: hypapgs
                "\"HYPECGD\" TEXT," + // 28: hypecgd
                "\"HYPPCGD\" TEXT," + // 29: hyppcgd
                "\"HYPAPGD\" TEXT," + // 30: hypapgd
                "\"ECG_PL\" TEXT," + // 31: ecgPl
                "\"PCG_PL\" TEXT," + // 32: pcgPl
                "\"APG_L\" TEXT," + // 33: apgL
                "\"ECG_PR\" TEXT," + // 34: ecgPr
                "\"PCG_PR\" TEXT," + // 35: pcgPr
                "\"ARG_R\" TEXT," + // 36: argR
                "\"ECG_TH\" TEXT," + // 37: ecgTh
                "\"APG_TH\" TEXT," + // 38: apgTh
                "\"BASIS_MEASUREMENT_ID\" TEXT," + // 39: basisMeasurementId
                "\"PATIENT_ID\" INTEGER NOT NULL );"); // 40: patientId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT_CHECK_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PatientCheckDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(2, caseNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(6, nationality);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(9, uniqueId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
 
        String hospitalId = entity.getHospitalId();
        if (hospitalId != null) {
            stmt.bindString(11, hospitalId);
        }
        stmt.bindLong(12, entity.getDelFlag());
        stmt.bindLong(13, entity.getHeight());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getPs());
        stmt.bindLong(16, entity.getPd());
        stmt.bindLong(17, entity.getBrPs());
        stmt.bindLong(18, entity.getBrPd());
        stmt.bindLong(19, entity.getAlPs());
        stmt.bindLong(20, entity.getAlPd());
        stmt.bindLong(21, entity.getArPs());
        stmt.bindLong(22, entity.getArPd());
        stmt.bindLong(23, entity.getPcmpt());
        stmt.bindLong(24, entity.getPexpd());
        stmt.bindLong(25, entity.getPavrg());
 
        String hypecgs = entity.getHypecgs();
        if (hypecgs != null) {
            stmt.bindString(26, hypecgs);
        }
 
        String hyppcgs = entity.getHyppcgs();
        if (hyppcgs != null) {
            stmt.bindString(27, hyppcgs);
        }
 
        String hypapgs = entity.getHypapgs();
        if (hypapgs != null) {
            stmt.bindString(28, hypapgs);
        }
 
        String hypecgd = entity.getHypecgd();
        if (hypecgd != null) {
            stmt.bindString(29, hypecgd);
        }
 
        String hyppcgd = entity.getHyppcgd();
        if (hyppcgd != null) {
            stmt.bindString(30, hyppcgd);
        }
 
        String hypapgd = entity.getHypapgd();
        if (hypapgd != null) {
            stmt.bindString(31, hypapgd);
        }
 
        String ecgPl = entity.getEcgPl();
        if (ecgPl != null) {
            stmt.bindString(32, ecgPl);
        }
 
        String pcgPl = entity.getPcgPl();
        if (pcgPl != null) {
            stmt.bindString(33, pcgPl);
        }
 
        String apgL = entity.getApgL();
        if (apgL != null) {
            stmt.bindString(34, apgL);
        }
 
        String ecgPr = entity.getEcgPr();
        if (ecgPr != null) {
            stmt.bindString(35, ecgPr);
        }
 
        String pcgPr = entity.getPcgPr();
        if (pcgPr != null) {
            stmt.bindString(36, pcgPr);
        }
 
        String argR = entity.getArgR();
        if (argR != null) {
            stmt.bindString(37, argR);
        }
 
        String ecgTh = entity.getEcgTh();
        if (ecgTh != null) {
            stmt.bindString(38, ecgTh);
        }
 
        String apgTh = entity.getApgTh();
        if (apgTh != null) {
            stmt.bindString(39, apgTh);
        }
 
        String basisMeasurementId = entity.getBasisMeasurementId();
        if (basisMeasurementId != null) {
            stmt.bindString(40, basisMeasurementId);
        }
        stmt.bindLong(41, entity.getPatientId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PatientCheckDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(2, caseNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSex());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(6, nationality);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(9, uniqueId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
 
        String hospitalId = entity.getHospitalId();
        if (hospitalId != null) {
            stmt.bindString(11, hospitalId);
        }
        stmt.bindLong(12, entity.getDelFlag());
        stmt.bindLong(13, entity.getHeight());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getPs());
        stmt.bindLong(16, entity.getPd());
        stmt.bindLong(17, entity.getBrPs());
        stmt.bindLong(18, entity.getBrPd());
        stmt.bindLong(19, entity.getAlPs());
        stmt.bindLong(20, entity.getAlPd());
        stmt.bindLong(21, entity.getArPs());
        stmt.bindLong(22, entity.getArPd());
        stmt.bindLong(23, entity.getPcmpt());
        stmt.bindLong(24, entity.getPexpd());
        stmt.bindLong(25, entity.getPavrg());
 
        String hypecgs = entity.getHypecgs();
        if (hypecgs != null) {
            stmt.bindString(26, hypecgs);
        }
 
        String hyppcgs = entity.getHyppcgs();
        if (hyppcgs != null) {
            stmt.bindString(27, hyppcgs);
        }
 
        String hypapgs = entity.getHypapgs();
        if (hypapgs != null) {
            stmt.bindString(28, hypapgs);
        }
 
        String hypecgd = entity.getHypecgd();
        if (hypecgd != null) {
            stmt.bindString(29, hypecgd);
        }
 
        String hyppcgd = entity.getHyppcgd();
        if (hyppcgd != null) {
            stmt.bindString(30, hyppcgd);
        }
 
        String hypapgd = entity.getHypapgd();
        if (hypapgd != null) {
            stmt.bindString(31, hypapgd);
        }
 
        String ecgPl = entity.getEcgPl();
        if (ecgPl != null) {
            stmt.bindString(32, ecgPl);
        }
 
        String pcgPl = entity.getPcgPl();
        if (pcgPl != null) {
            stmt.bindString(33, pcgPl);
        }
 
        String apgL = entity.getApgL();
        if (apgL != null) {
            stmt.bindString(34, apgL);
        }
 
        String ecgPr = entity.getEcgPr();
        if (ecgPr != null) {
            stmt.bindString(35, ecgPr);
        }
 
        String pcgPr = entity.getPcgPr();
        if (pcgPr != null) {
            stmt.bindString(36, pcgPr);
        }
 
        String argR = entity.getArgR();
        if (argR != null) {
            stmt.bindString(37, argR);
        }
 
        String ecgTh = entity.getEcgTh();
        if (ecgTh != null) {
            stmt.bindString(38, ecgTh);
        }
 
        String apgTh = entity.getApgTh();
        if (apgTh != null) {
            stmt.bindString(39, apgTh);
        }
 
        String basisMeasurementId = entity.getBasisMeasurementId();
        if (basisMeasurementId != null) {
            stmt.bindString(40, basisMeasurementId);
        }
        stmt.bindLong(41, entity.getPatientId());
    }

    @Override
    protected final void attachEntity(PatientCheckDataBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PatientCheckDataBean readEntity(Cursor cursor, int offset) {
        PatientCheckDataBean entity = new PatientCheckDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caseNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nationality
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uniqueId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hospitalId
            cursor.getInt(offset + 11), // delFlag
            cursor.getInt(offset + 12), // height
            cursor.getInt(offset + 13), // weight
            cursor.getInt(offset + 14), // ps
            cursor.getInt(offset + 15), // pd
            cursor.getInt(offset + 16), // brPs
            cursor.getInt(offset + 17), // brPd
            cursor.getInt(offset + 18), // alPs
            cursor.getInt(offset + 19), // alPd
            cursor.getInt(offset + 20), // arPs
            cursor.getInt(offset + 21), // arPd
            cursor.getInt(offset + 22), // pcmpt
            cursor.getInt(offset + 23), // pexpd
            cursor.getInt(offset + 24), // pavrg
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // hypecgs
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // hyppcgs
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // hypapgs
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // hypecgd
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // hyppcgd
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // hypapgd
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // ecgPl
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // pcgPl
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // apgL
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // ecgPr
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // pcgPr
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // argR
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // ecgTh
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // apgTh
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // basisMeasurementId
            cursor.getLong(offset + 40) // patientId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PatientCheckDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCaseNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNationality(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUniqueId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHospitalId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDelFlag(cursor.getInt(offset + 11));
        entity.setHeight(cursor.getInt(offset + 12));
        entity.setWeight(cursor.getInt(offset + 13));
        entity.setPs(cursor.getInt(offset + 14));
        entity.setPd(cursor.getInt(offset + 15));
        entity.setBrPs(cursor.getInt(offset + 16));
        entity.setBrPd(cursor.getInt(offset + 17));
        entity.setAlPs(cursor.getInt(offset + 18));
        entity.setAlPd(cursor.getInt(offset + 19));
        entity.setArPs(cursor.getInt(offset + 20));
        entity.setArPd(cursor.getInt(offset + 21));
        entity.setPcmpt(cursor.getInt(offset + 22));
        entity.setPexpd(cursor.getInt(offset + 23));
        entity.setPavrg(cursor.getInt(offset + 24));
        entity.setHypecgs(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHyppcgs(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setHypapgs(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setHypecgd(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHyppcgd(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHypapgd(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setEcgPl(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPcgPl(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setApgL(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setEcgPr(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setPcgPr(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setArgR(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setEcgTh(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setApgTh(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setBasisMeasurementId(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setPatientId(cursor.getLong(offset + 40));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PatientCheckDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PatientCheckDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PatientCheckDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "checks" to-many relationship of PatientdbBean. */
    public List<PatientCheckDataBean> _queryPatientdbBean_Checks(Long patientId) {
        synchronized (this) {
            if (patientdbBean_ChecksQuery == null) {
                QueryBuilder<PatientCheckDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PatientId.eq(null));
                patientdbBean_ChecksQuery = queryBuilder.build();
            }
        }
        Query<PatientCheckDataBean> query = patientdbBean_ChecksQuery.forCurrentThread();
        query.setParameter(0, patientId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPatientdbBeanDao().getAllColumns());
            builder.append(" FROM PATIENT_CHECK_DATA_BEAN T");
            builder.append(" LEFT JOIN PATIENTDB_BEAN T0 ON T.\"PATIENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PatientCheckDataBean loadCurrentDeep(Cursor cursor, boolean lock) {
        PatientCheckDataBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PatientdbBean patient = loadCurrentOther(daoSession.getPatientdbBeanDao(), cursor, offset);
         if(patient != null) {
            entity.setPatient(patient);
        }

        return entity;    
    }

    public PatientCheckDataBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PatientCheckDataBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PatientCheckDataBean> list = new ArrayList<PatientCheckDataBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PatientCheckDataBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PatientCheckDataBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
